//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

namespace GDExtension
{
	using System.Runtime.InteropServices;

	public static unsafe class Native
	{
		/// <summary>
		/// VARIANT TYPES
		/// </summary>
		public enum GDExtensionVariantType : int
		{
			GDEXTENSION_VARIANT_TYPE_NIL,

			/// <summary>
			/// atomic types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_BOOL,

			/// <summary>
			/// atomic types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_INT,

			/// <summary>
			/// atomic types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_FLOAT,

			/// <summary>
			/// atomic types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_STRING,

			/// <summary>
			/// math types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_VECTOR2,

			/// <summary>
			/// math types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_VECTOR2I,

			/// <summary>
			/// math types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_RECT2,

			/// <summary>
			/// math types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_RECT2I,

			/// <summary>
			/// math types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_VECTOR3,

			/// <summary>
			/// math types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_VECTOR3I,

			/// <summary>
			/// math types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_TRANSFORM2D,

			/// <summary>
			/// math types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_VECTOR4,

			/// <summary>
			/// math types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_VECTOR4I,

			/// <summary>
			/// math types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_PLANE,

			/// <summary>
			/// math types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_QUATERNION,

			/// <summary>
			/// math types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_AABB,

			/// <summary>
			/// math types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_BASIS,

			/// <summary>
			/// math types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_TRANSFORM3D,

			/// <summary>
			/// math types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_PROJECTION,

			/// <summary>
			/// misc types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_COLOR,

			/// <summary>
			/// misc types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_STRING_NAME,

			/// <summary>
			/// misc types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_NODE_PATH,

			/// <summary>
			/// misc types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_RID,

			/// <summary>
			/// misc types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_OBJECT,

			/// <summary>
			/// misc types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_CALLABLE,

			/// <summary>
			/// misc types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_SIGNAL,

			/// <summary>
			/// misc types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_DICTIONARY,

			/// <summary>
			/// misc types
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_ARRAY,

			/// <summary>
			/// typed arrays
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY,

			/// <summary>
			/// typed arrays
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY,

			/// <summary>
			/// typed arrays
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY,

			/// <summary>
			/// typed arrays
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY,

			/// <summary>
			/// typed arrays
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY,

			/// <summary>
			/// typed arrays
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY,

			/// <summary>
			/// typed arrays
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY,

			/// <summary>
			/// typed arrays
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY,

			/// <summary>
			/// typed arrays
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY,

			/// <summary>
			/// typed arrays
			/// </summary>
			GDEXTENSION_VARIANT_TYPE_VARIANT_MAX,
		}

		public enum GDExtensionVariantOperator : int
		{
			/// <summary>
			/// comparison
			/// </summary>
			GDEXTENSION_VARIANT_OP_EQUAL,

			/// <summary>
			/// comparison
			/// </summary>
			GDEXTENSION_VARIANT_OP_NOT_EQUAL,

			/// <summary>
			/// comparison
			/// </summary>
			GDEXTENSION_VARIANT_OP_LESS,

			/// <summary>
			/// comparison
			/// </summary>
			GDEXTENSION_VARIANT_OP_LESS_EQUAL,

			/// <summary>
			/// comparison
			/// </summary>
			GDEXTENSION_VARIANT_OP_GREATER,

			/// <summary>
			/// comparison
			/// </summary>
			GDEXTENSION_VARIANT_OP_GREATER_EQUAL,

			/// <summary>
			/// mathematic
			/// </summary>
			GDEXTENSION_VARIANT_OP_ADD,

			/// <summary>
			/// mathematic
			/// </summary>
			GDEXTENSION_VARIANT_OP_SUBTRACT,

			/// <summary>
			/// mathematic
			/// </summary>
			GDEXTENSION_VARIANT_OP_MULTIPLY,

			/// <summary>
			/// mathematic
			/// </summary>
			GDEXTENSION_VARIANT_OP_DIVIDE,

			/// <summary>
			/// mathematic
			/// </summary>
			GDEXTENSION_VARIANT_OP_NEGATE,

			/// <summary>
			/// mathematic
			/// </summary>
			GDEXTENSION_VARIANT_OP_POSITIVE,

			/// <summary>
			/// mathematic
			/// </summary>
			GDEXTENSION_VARIANT_OP_MODULE,

			/// <summary>
			/// mathematic
			/// </summary>
			GDEXTENSION_VARIANT_OP_POWER,

			/// <summary>
			/// bitwise
			/// </summary>
			GDEXTENSION_VARIANT_OP_SHIFT_LEFT,

			/// <summary>
			/// bitwise
			/// </summary>
			GDEXTENSION_VARIANT_OP_SHIFT_RIGHT,

			/// <summary>
			/// bitwise
			/// </summary>
			GDEXTENSION_VARIANT_OP_BIT_AND,

			/// <summary>
			/// bitwise
			/// </summary>
			GDEXTENSION_VARIANT_OP_BIT_OR,

			/// <summary>
			/// bitwise
			/// </summary>
			GDEXTENSION_VARIANT_OP_BIT_XOR,

			/// <summary>
			/// bitwise
			/// </summary>
			GDEXTENSION_VARIANT_OP_BIT_NEGATE,

			/// <summary>
			/// logic
			/// </summary>
			GDEXTENSION_VARIANT_OP_AND,

			/// <summary>
			/// logic
			/// </summary>
			GDEXTENSION_VARIANT_OP_OR,

			/// <summary>
			/// logic
			/// </summary>
			GDEXTENSION_VARIANT_OP_XOR,

			/// <summary>
			/// logic
			/// </summary>
			GDEXTENSION_VARIANT_OP_NOT,

			/// <summary>
			/// containment
			/// </summary>
			GDEXTENSION_VARIANT_OP_IN,

			/// <summary>
			/// containment
			/// </summary>
			GDEXTENSION_VARIANT_OP_MAX,
		}

		/// <summary>
		/// VARIANT DATA I/O
		/// </summary>
		public enum GDExtensionCallErrorType : int
		{
			GDEXTENSION_CALL_OK,

			GDEXTENSION_CALL_ERROR_INVALID_METHOD,

			/// <summary>
			/// Expected a different variant type.
			/// </summary>
			GDEXTENSION_CALL_ERROR_INVALID_ARGUMENT,

			/// <summary>
			/// Expected lower number of arguments.
			/// </summary>
			GDEXTENSION_CALL_ERROR_TOO_MANY_ARGUMENTS,

			/// <summary>
			/// Expected higher number of arguments.
			/// </summary>
			GDEXTENSION_CALL_ERROR_TOO_FEW_ARGUMENTS,

			GDEXTENSION_CALL_ERROR_INSTANCE_IS_NULL,

			/// <summary>
			/// Used for const call.
			/// </summary>
			GDEXTENSION_CALL_ERROR_METHOD_NOT_CONST,
		}

		/// <summary>
		/// Method
		/// </summary>
		public enum GDExtensionClassMethodFlags : int
		{
			GDEXTENSION_METHOD_FLAG_NORMAL = unchecked((int)1),

			GDEXTENSION_METHOD_FLAG_EDITOR = unchecked((int)2),

			GDEXTENSION_METHOD_FLAG_CONST = unchecked((int)4),

			GDEXTENSION_METHOD_FLAG_VIRTUAL = unchecked((int)8),

			GDEXTENSION_METHOD_FLAG_VARARG = unchecked((int)16),

			GDEXTENSION_METHOD_FLAG_STATIC = unchecked((int)32),

			GDEXTENSION_METHOD_FLAGS_DEFAULT = unchecked((int)GDEXTENSION_METHOD_FLAG_NORMAL),
		}

		public enum GDExtensionClassMethodArgumentMetadata : int
		{
			GDEXTENSION_METHOD_ARGUMENT_METADATA_NONE,

			GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT8,

			GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT16,

			GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT32,

			GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT64,

			GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT8,

			GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT16,

			GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT32,

			GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT64,

			GDEXTENSION_METHOD_ARGUMENT_METADATA_REAL_IS_FLOAT,

			GDEXTENSION_METHOD_ARGUMENT_METADATA_REAL_IS_DOUBLE,
		}

		/// <summary>
		/// INITIALIZATION
		/// </summary>
		public enum GDExtensionInitializationLevel : int
		{
			GDEXTENSION_INITIALIZATION_CORE,

			GDEXTENSION_INITIALIZATION_SERVERS,

			GDEXTENSION_INITIALIZATION_SCENE,

			GDEXTENSION_INITIALIZATION_EDITOR,

			GDEXTENSION_MAX_INITIALIZATION_LEVEL,
		}

		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
		public partial struct GDExtensionCallError
		{
			public Native.GDExtensionCallErrorType error;

			public int argument;

			public int expected;
		}

		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
		public partial struct GDExtensionInstanceBindingCallbacks
		{
			public Native.GDExtensionInstanceBindingCreateCallback create_callback;

			public Native.GDExtensionInstanceBindingFreeCallback free_callback;

			public Native.GDExtensionInstanceBindingReferenceCallback reference_callback;
		}

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void* GDExtensionInstanceBindingCreateCallback(void* p_token, void* p_instance);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionInstanceBindingFreeCallback(void* p_token, void* p_instance, void* p_binding);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate byte GDExtensionInstanceBindingReferenceCallback(void* p_token, void* p_binding, byte p_reference);

		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
		public partial struct GDExtensionPropertyInfo
		{
			public Native.GDExtensionVariantType type;

			public void* name;

			public void* class_name;

			/// <summary>
			/// Bitfield of `PropertyHint` (defined in `extension_api.json`).
			/// </summary>
			public uint hint;

			public void* hint_string;

			/// <summary>
			/// Bitfield of `PropertyUsageFlags` (defined in `extension_api.json`).
			/// </summary>
			public uint usage;
		}

		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
		public partial struct GDExtensionMethodInfo
		{
			public void* name;

			public Native.GDExtensionPropertyInfo return_value;

			/// <summary>
			/// Bitfield of `GDExtensionClassMethodFlags`.
			/// </summary>
			public uint flags;

			public int id;

			/// <summary>
			/// Arguments: `default_arguments` is an array of size `argument_count`.
			/// </summary>
			public uint argument_count;

			public void* arguments;

			/// <summary>
			/// Default arguments: `default_arguments` is an array of size `default_argument_count`.
			/// </summary>
			public uint default_argument_count;

			public void* default_arguments;
		}

		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
		public partial struct GDExtensionClassCreationInfo
		{
			public byte is_virtual;

			public byte is_abstract;

			public IntPtr set_func;

			public IntPtr get_func;

			public IntPtr get_property_list_func;

			public IntPtr free_property_list_func;

			public IntPtr property_can_revert_func;

			public IntPtr property_get_revert_func;

			public IntPtr notification_func;

			public IntPtr to_string_func;

			public IntPtr reference_func;

			public IntPtr unreference_func;

			/// <summary>
			/// (Default) constructor; mandatory. If the class is not instantiable, consider making it virtual or abstract.
			/// </summary>
			public IntPtr create_instance_func;

			/// <summary>
			/// Destructor; mandatory.
			/// </summary>
			public IntPtr free_instance_func;

			/// <summary>
			/// Queries a virtual function by name and returns a callback to invoke the requested virtual function.
			/// </summary>
			public IntPtr get_virtual_func;

			public IntPtr get_rid_func;

			/// <summary>
			/// Per-class user data, later accessible in instance bindings.
			/// </summary>
			public void* class_userdata;
		}

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate byte GDExtensionClassSet(void* p_instance, void* p_name, void* p_value);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate byte GDExtensionClassGet(void* p_instance, void* p_name, void* r_ret);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void* GDExtensionClassGetPropertyList(void* p_instance,  uint* r_count);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionClassFreePropertyList(void* p_instance, in Native.GDExtensionPropertyInfo p_list);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate byte GDExtensionClassPropertyCanRevert(void* p_instance, void* p_name);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate byte GDExtensionClassPropertyGetRevert(void* p_instance, void* p_name, void* r_ret);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionClassNotification(void* p_instance, int p_what);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionClassToString(void* p_instance,  byte* r_is_valid, void* p_out);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionClassReference(void* p_instance);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionClassUnreference(void* p_instance);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void* GDExtensionClassCreateInstance(void* p_userdata);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionClassFreeInstance(void* p_userdata, void* p_instance);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate Native.GDExtensionClassCallVirtual GDExtensionClassGetVirtual(void* p_userdata, void* p_name);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionClassCallVirtual(void* p_instance,  void** p_args, void* r_ret);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate ulong GDExtensionClassGetRID(void* p_instance);

		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
		public partial struct GDExtensionClassMethodInfo
		{
			public void* name;

			public void* method_userdata;

			public IntPtr call_func;

			public IntPtr ptrcall_func;

			/// <summary>
			/// Bitfield of `GDExtensionClassMethodFlags`.
			/// </summary>
			public uint method_flags;

			/// <summary>
			/// If `has_return_value` is false, `return_value_info` and `return_value_metadata` are ignored.
			/// </summary>
			public byte has_return_value;

			public void* return_value_info;

			public Native.GDExtensionClassMethodArgumentMetadata return_value_metadata;

			/// <summary>
			/// Arguments: `arguments_info` and `arguments_metadata` are array of size `argument_count`.
			/// Name and hint information for the argument can be omitted in release builds. Class name should always be present if it applies.
			/// </summary>
			public uint argument_count;

			public void* arguments_info;

			public void* arguments_metadata;

			/// <summary>
			/// Default arguments: `default_arguments` is an array of size `default_argument_count`.
			/// </summary>
			public uint default_argument_count;

			public void* default_arguments;
		}

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionClassMethodCall(void* method_userdata, void* p_instance,  void** p_args, long p_argument_count, void* r_return,  Native.GDExtensionCallError* r_error);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionClassMethodPtrCall(void* method_userdata, void* p_instance,  void** p_args, void* r_ret);

		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
		public partial struct GDExtensionScriptInstanceInfo
		{
			public Native.GDExtensionScriptInstanceSet set_func;

			public Native.GDExtensionScriptInstanceGet get_func;

			public Native.GDExtensionScriptInstanceGetPropertyList get_property_list_func;

			public Native.GDExtensionScriptInstanceFreePropertyList free_property_list_func;

			public Native.GDExtensionScriptInstancePropertyCanRevert property_can_revert_func;

			public Native.GDExtensionScriptInstancePropertyGetRevert property_get_revert_func;

			public Native.GDExtensionScriptInstanceGetOwner get_owner_func;

			public Native.GDExtensionScriptInstanceGetPropertyState get_property_state_func;

			public Native.GDExtensionScriptInstanceGetMethodList get_method_list_func;

			public Native.GDExtensionScriptInstanceFreeMethodList free_method_list_func;

			public Native.GDExtensionScriptInstanceGetPropertyType get_property_type_func;

			public Native.GDExtensionScriptInstanceHasMethod has_method_func;

			public Native.GDExtensionScriptInstanceCall call_func;

			public Native.GDExtensionScriptInstanceNotification notification_func;

			public Native.GDExtensionScriptInstanceToString to_string_func;

			public Native.GDExtensionScriptInstanceRefCountIncremented refcount_incremented_func;

			public Native.GDExtensionScriptInstanceRefCountDecremented refcount_decremented_func;

			public Native.GDExtensionScriptInstanceGetScript get_script_func;

			public Native.GDExtensionScriptInstanceIsPlaceholder is_placeholder_func;

			public Native.GDExtensionScriptInstanceSet set_fallback_func;

			public Native.GDExtensionScriptInstanceGet get_fallback_func;

			public Native.GDExtensionScriptInstanceGetLanguage get_language_func;

			public Native.GDExtensionScriptInstanceFree free_func;
		}

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate byte GDExtensionScriptInstanceSet(void* p_instance, void* p_name, void* p_value);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate byte GDExtensionScriptInstanceGet(void* p_instance, void* p_name, void* r_ret);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void* GDExtensionScriptInstanceGetPropertyList(void* p_instance,  uint* r_count);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionScriptInstanceFreePropertyList(void* p_instance, in Native.GDExtensionPropertyInfo p_list);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate byte GDExtensionScriptInstancePropertyCanRevert(void* p_instance, void* p_name);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate byte GDExtensionScriptInstancePropertyGetRevert(void* p_instance, void* p_name, void* r_ret);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void* GDExtensionScriptInstanceGetOwner(void* p_instance);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionScriptInstanceGetPropertyState(void* p_instance, Native.GDExtensionScriptInstancePropertyStateAdd p_add_func, void* p_userdata);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionScriptInstancePropertyStateAdd(void* p_name, void* p_value, void* p_userdata);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void* GDExtensionScriptInstanceGetMethodList(void* p_instance,  uint* r_count);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionScriptInstanceFreeMethodList(void* p_instance, in Native.GDExtensionMethodInfo p_list);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate Native.GDExtensionVariantType GDExtensionScriptInstanceGetPropertyType(void* p_instance, void* p_name,  byte* r_is_valid);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate byte GDExtensionScriptInstanceHasMethod(void* p_instance, void* p_name);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionScriptInstanceCall(void* p_self, void* p_method,  void** p_args, long p_argument_count, void* r_return,  Native.GDExtensionCallError* r_error);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionScriptInstanceNotification(void* p_instance, int p_what);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionScriptInstanceToString(void* p_instance, byte* r_is_valid, void* r_out);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionScriptInstanceRefCountIncremented(void* p_instance);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate byte GDExtensionScriptInstanceRefCountDecremented(void* p_instance);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void* GDExtensionScriptInstanceGetScript(void* p_instance);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate byte GDExtensionScriptInstanceIsPlaceholder(void* p_instance);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void* GDExtensionScriptInstanceGetLanguage(void* p_instance);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionScriptInstanceFree(void* p_instance);

		/// <summary>
		/// INTERFACE
		/// </summary>
		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
		public partial struct GDExtensionInterface
		{
			public uint version_major;

			public uint version_minor;

			public uint version_patch;

			[MarshalAs(UnmanagedType.LPStr)]
			public string version_string;

			/// <summary>
			/// GODOT CORE
			/// </summary>
			public Native.GDExtensionInterface.mem_alloc_delegate mem_alloc;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* mem_alloc_delegate(nuint p_bytes);

			public Native.GDExtensionInterface.mem_realloc_delegate mem_realloc;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* mem_realloc_delegate(void* p_ptr, nuint p_bytes);

			public Native.GDExtensionInterface.mem_free_delegate mem_free;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void mem_free_delegate(void* p_ptr);

            public Native.GDExtensionInterface.print_error_delegate print_error;

            [UnmanagedFunctionPointer(CallingConvention.StdCall)]
            public delegate void print_error_delegate([MarshalAs(UnmanagedType.LPStr)] string p_description, [MarshalAs(UnmanagedType.LPStr)] string p_function, [MarshalAs(UnmanagedType.LPStr)] string p_file, int p_line);


            public Native.GDExtensionInterface.print_error_with_message_delegate print_error_with_message;

            [UnmanagedFunctionPointer(CallingConvention.StdCall)]
            public delegate void print_error_with_message_delegate([MarshalAs(UnmanagedType.LPStr)] string p_description, [MarshalAs(UnmanagedType.LPStr)] string p_message, [MarshalAs(UnmanagedType.LPStr)] string p_function, [MarshalAs(UnmanagedType.LPStr)] string p_file, int p_line);

			public Native.GDExtensionInterface.print_warning_delegate print_warning;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void print_warning_delegate([MarshalAs(UnmanagedType.LPStr)] string p_description, [MarshalAs(UnmanagedType.LPStr)] string p_function, [MarshalAs(UnmanagedType.LPStr)] string p_file, int p_line);

            public Native.GDExtensionInterface.print_warning_delegate_with_message print_warning_with_message;

            [UnmanagedFunctionPointer(CallingConvention.StdCall)]
            public delegate void print_warning_delegate_with_message([MarshalAs(UnmanagedType.LPStr)] string p_description, [MarshalAs(UnmanagedType.LPStr)] string p_message, [MarshalAs(UnmanagedType.LPStr)] string p_function, [MarshalAs(UnmanagedType.LPStr)] string p_file, int p_line);

            public Native.GDExtensionInterface.print_script_error_delegate print_script_error;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void print_script_error_delegate([MarshalAs(UnmanagedType.LPStr)] string p_description, [MarshalAs(UnmanagedType.LPStr)] string p_function, [MarshalAs(UnmanagedType.LPStr)] string p_file, int p_line);

            public Native.GDExtensionInterface.print_script_error_with_message_delegate print_script_error_with_message;

            [UnmanagedFunctionPointer(CallingConvention.StdCall)]
            public delegate void print_script_error_with_message_delegate([MarshalAs(UnmanagedType.LPStr)] string p_description, [MarshalAs(UnmanagedType.LPStr)] string p_message, [MarshalAs(UnmanagedType.LPStr)] string p_function, [MarshalAs(UnmanagedType.LPStr)] string p_file, int p_line);


            public Native.GDExtensionInterface.get_native_struct_size_delegate get_native_struct_size;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate ulong get_native_struct_size_delegate(void* p_name);

			/// <summary>
			/// variant general
			/// </summary>
			public Native.GDExtensionInterface.variant_new_copy_delegate variant_new_copy;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_new_copy_delegate(void* r_dest, void* p_src);

			public Native.GDExtensionInterface.variant_new_nil_delegate variant_new_nil;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_new_nil_delegate(void* r_dest);

			public Native.GDExtensionInterface.variant_destroy_delegate variant_destroy;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_destroy_delegate(void* p_self);

			/// <summary>
			/// variant type
			/// </summary>
			public Native.GDExtensionInterface.variant_call_delegate variant_call;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_call_delegate(void* p_self, void* p_method, void** p_args, long p_argument_count, void* r_return,  Native.GDExtensionCallError* r_error);

			public Native.GDExtensionInterface.variant_call_static_delegate variant_call_static;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_call_static_delegate(Native.GDExtensionVariantType p_type, void* p_method, void** p_args, long p_argument_count, void* r_return,  Native.GDExtensionCallError* r_error);

			public Native.GDExtensionInterface.variant_evaluate_delegate variant_evaluate;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_evaluate_delegate(Native.GDExtensionVariantOperator p_op, void* p_a, void* p_b, void* r_return, byte* r_valid);

			public Native.GDExtensionInterface.variant_set_delegate variant_set;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_set_delegate(void* p_self, void* p_key, void* p_value, byte* r_valid);

			public Native.GDExtensionInterface.variant_set_named_delegate variant_set_named;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_set_named_delegate(void* p_self, void* p_key, void* p_value, byte* r_valid);

			public Native.GDExtensionInterface.variant_set_keyed_delegate variant_set_keyed;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_set_keyed_delegate(void* p_self, void* p_key, void* p_value, byte* r_valid);

			public Native.GDExtensionInterface.variant_set_indexed_delegate variant_set_indexed;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_set_indexed_delegate(void* p_self, long p_index, void* p_value, byte* r_valid, byte* r_oob);

			public Native.GDExtensionInterface.variant_get_delegate variant_get;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_get_delegate(void* p_self, void* p_key, void* r_ret, byte* r_valid);

			public Native.GDExtensionInterface.variant_get_named_delegate variant_get_named;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_get_named_delegate(void* p_self, void* p_key, void* r_ret, byte* r_valid);

			public Native.GDExtensionInterface.variant_get_keyed_delegate variant_get_keyed;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_get_keyed_delegate(void* p_self, void* p_key, void* r_ret,  byte* r_valid);

			public Native.GDExtensionInterface.variant_get_indexed_delegate variant_get_indexed;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_get_indexed_delegate(void* p_self, long p_index, void* r_ret,  byte* r_valid,  byte* r_oob);

			public Native.GDExtensionInterface.variant_iter_init_delegate variant_iter_init;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate byte variant_iter_init_delegate(void* p_self, void* r_iter, byte* r_valid);

			public Native.GDExtensionInterface.variant_iter_next_delegate variant_iter_next;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate byte variant_iter_next_delegate(void* p_self, void* r_iter, byte* r_valid);

			public Native.GDExtensionInterface.variant_iter_get_delegate variant_iter_get;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_iter_get_delegate(void* p_self, void* r_iter, void* r_ret, byte* r_valid);

			public Native.GDExtensionInterface.variant_hash_delegate variant_hash;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate long variant_hash_delegate(void* p_self);

			public Native.GDExtensionInterface.variant_recursive_hash_delegate variant_recursive_hash;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate long variant_recursive_hash_delegate(void* p_self, long p_recursion_count);

			public Native.GDExtensionInterface.variant_hash_compare_delegate variant_hash_compare;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate byte variant_hash_compare_delegate(void* p_self, void* p_other);

			public Native.GDExtensionInterface.variant_booleanize_delegate variant_booleanize;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate byte variant_booleanize_delegate(void* p_self);

			public Native.GDExtensionInterface.variant_duplicate_delegate variant_duplicate;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_duplicate_delegate(void* p_self, void* r_ret, byte p_deep);

			public Native.GDExtensionInterface.variant_stringify_delegate variant_stringify;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_stringify_delegate(void* p_self, void* r_ret);

			public Native.GDExtensionInterface.variant_get_type_delegate variant_get_type;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate Native.GDExtensionVariantType variant_get_type_delegate(void* p_self);

			public Native.GDExtensionInterface.variant_has_method_delegate variant_has_method;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate byte variant_has_method_delegate(void* p_self, void* p_method);

			public Native.GDExtensionInterface.variant_has_member_delegate variant_has_member;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate byte variant_has_member_delegate(Native.GDExtensionVariantType p_type, void* p_member);

			public Native.GDExtensionInterface.variant_has_key_delegate variant_has_key;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate byte variant_has_key_delegate(void* p_self, void* p_key, byte* r_valid);

			public Native.GDExtensionInterface.variant_get_type_name_delegate variant_get_type_name;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_get_type_name_delegate(Native.GDExtensionVariantType p_type, void* r_name);

			public Native.GDExtensionInterface.variant_can_convert_delegate variant_can_convert;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate byte variant_can_convert_delegate(Native.GDExtensionVariantType p_from, Native.GDExtensionVariantType p_to);

			public Native.GDExtensionInterface.variant_can_convert_strict_delegate variant_can_convert_strict;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate byte variant_can_convert_strict_delegate(Native.GDExtensionVariantType p_from, Native.GDExtensionVariantType p_to);

			/// <summary>
			/// ptrcalls
			/// </summary>
			public Native.GDExtensionInterface.get_variant_from_type_constructor_delegate get_variant_from_type_constructor;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate Native.GDExtensionVariantFromTypeConstructorFunc get_variant_from_type_constructor_delegate(Native.GDExtensionVariantType p_type);

			public Native.GDExtensionInterface.get_variant_to_type_constructor_delegate get_variant_to_type_constructor;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate Native.GDExtensionTypeFromVariantConstructorFunc get_variant_to_type_constructor_delegate(Native.GDExtensionVariantType p_type);

			public Native.GDExtensionInterface.variant_get_ptr_operator_evaluator_delegate variant_get_ptr_operator_evaluator;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate Native.GDExtensionPtrOperatorEvaluator variant_get_ptr_operator_evaluator_delegate(Native.GDExtensionVariantOperator p_operator, Native.GDExtensionVariantType p_type_a, Native.GDExtensionVariantType p_type_b);

			public Native.GDExtensionInterface.variant_get_ptr_builtin_method_delegate variant_get_ptr_builtin_method;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate Native.GDExtensionPtrBuiltInMethod variant_get_ptr_builtin_method_delegate(Native.GDExtensionVariantType p_type, void* p_method, long p_hash);

			public Native.GDExtensionInterface.variant_get_ptr_constructor_delegate variant_get_ptr_constructor;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate Native.GDExtensionPtrConstructor variant_get_ptr_constructor_delegate(Native.GDExtensionVariantType p_type, int p_constructor);

			public Native.GDExtensionInterface.variant_get_ptr_destructor_delegate variant_get_ptr_destructor;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate Native.GDExtensionPtrDestructor variant_get_ptr_destructor_delegate(Native.GDExtensionVariantType p_type);

			public Native.GDExtensionInterface.variant_construct_delegate variant_construct;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_construct_delegate(Native.GDExtensionVariantType p_type, void* p_base, void** p_args, int p_argument_count, Native.GDExtensionCallError* r_error);

			public Native.GDExtensionInterface.variant_get_ptr_setter_delegate variant_get_ptr_setter;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate Native.GDExtensionPtrSetter variant_get_ptr_setter_delegate(Native.GDExtensionVariantType p_type, void* p_member);

			public Native.GDExtensionInterface.variant_get_ptr_getter_delegate variant_get_ptr_getter;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate Native.GDExtensionPtrGetter variant_get_ptr_getter_delegate(Native.GDExtensionVariantType p_type, void* p_member);

			public Native.GDExtensionInterface.variant_get_ptr_indexed_setter_delegate variant_get_ptr_indexed_setter;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate Native.GDExtensionPtrIndexedSetter variant_get_ptr_indexed_setter_delegate(Native.GDExtensionVariantType p_type);

			public Native.GDExtensionInterface.variant_get_ptr_indexed_getter_delegate variant_get_ptr_indexed_getter;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate Native.GDExtensionPtrIndexedGetter variant_get_ptr_indexed_getter_delegate(Native.GDExtensionVariantType p_type);

			public Native.GDExtensionInterface.variant_get_ptr_keyed_setter_delegate variant_get_ptr_keyed_setter;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate Native.GDExtensionPtrKeyedSetter variant_get_ptr_keyed_setter_delegate(Native.GDExtensionVariantType p_type);

			public Native.GDExtensionInterface.variant_get_ptr_keyed_getter_delegate variant_get_ptr_keyed_getter;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate Native.GDExtensionPtrKeyedGetter variant_get_ptr_keyed_getter_delegate(Native.GDExtensionVariantType p_type);

			public Native.GDExtensionInterface.variant_get_ptr_keyed_checker_delegate variant_get_ptr_keyed_checker;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate Native.GDExtensionPtrKeyedChecker variant_get_ptr_keyed_checker_delegate(Native.GDExtensionVariantType p_type);

			public Native.GDExtensionInterface.variant_get_constant_value_delegate variant_get_constant_value;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void variant_get_constant_value_delegate(Native.GDExtensionVariantType p_type, void* p_constant, void* r_ret);

			public Native.GDExtensionInterface.variant_get_ptr_utility_function_delegate variant_get_ptr_utility_function;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate Native.GDExtensionPtrUtilityFunction variant_get_ptr_utility_function_delegate(void* p_function, long p_hash);

			/// <summary>
			/// extra utilities
			/// </summary>
			public Native.GDExtensionInterface.string_new_with_latin1_chars_delegate string_new_with_latin1_chars;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void string_new_with_latin1_chars_delegate(void* r_dest, [MarshalAs(UnmanagedType.LPStr)] string p_contents);

			public Native.GDExtensionInterface.string_new_with_utf8_chars_delegate string_new_with_utf8_chars;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void string_new_with_utf8_chars_delegate(void* r_dest, [MarshalAs(UnmanagedType.LPStr)] string p_contents);

			public Native.GDExtensionInterface.string_new_with_utf16_chars_delegate string_new_with_utf16_chars;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void string_new_with_utf16_chars_delegate(void* r_dest, ushort* p_contents);

			public Native.GDExtensionInterface.string_new_with_utf32_chars_delegate string_new_with_utf32_chars;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void string_new_with_utf32_chars_delegate(void* r_dest, void* p_contents);

			public Native.GDExtensionInterface.string_new_with_wide_chars_delegate string_new_with_wide_chars;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void string_new_with_wide_chars_delegate(void* r_dest, char* p_contents);

			public Native.GDExtensionInterface.string_new_with_latin1_chars_and_len_delegate string_new_with_latin1_chars_and_len;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void string_new_with_latin1_chars_and_len_delegate(void* r_dest, [MarshalAs(UnmanagedType.LPStr)] string p_contents, long p_size);

			public Native.GDExtensionInterface.string_new_with_utf8_chars_and_len_delegate string_new_with_utf8_chars_and_len;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void string_new_with_utf8_chars_and_len_delegate(void* r_dest, [MarshalAs(UnmanagedType.LPStr)] string p_contents, long p_size);

			public Native.GDExtensionInterface.string_new_with_utf16_chars_and_len_delegate string_new_with_utf16_chars_and_len;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void string_new_with_utf16_chars_and_len_delegate(void* r_dest, void* p_contents, long p_size);

			public Native.GDExtensionInterface.string_new_with_utf32_chars_and_len_delegate string_new_with_utf32_chars_and_len;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void string_new_with_utf32_chars_and_len_delegate(void* r_dest, void* p_contents, long p_size);

			public Native.GDExtensionInterface.string_new_with_wide_chars_and_len_delegate string_new_with_wide_chars_and_len;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void string_new_with_wide_chars_and_len_delegate(void* r_dest, char* p_contents, long p_size);

			/// <summary>
			/// Information about the following functions:
			/// - The return value is the resulting encoded string length.
			/// - The length returned is in characters, not in bytes. It also does not include a trailing zero.
			/// - These functions also do not write trailing zero, If you need it, write it yourself at the position indicated by the length (and make sure to allocate it).
			/// - Passing NULL in r_text means only the length is computed (again, without including trailing zero).
			/// - p_max_write_length argument is in characters, not bytes. It will be ignored if r_text is NULL.
			/// - p_max_write_length argument does not affect the return value, it's only to cap write length.
			/// </summary>
			public Native.GDExtensionInterface.string_to_latin1_chars_delegate string_to_latin1_chars;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate long string_to_latin1_chars_delegate(void* p_self, void* r_text, long p_max_write_length);

			public Native.GDExtensionInterface.string_to_utf8_chars_delegate string_to_utf8_chars;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate long string_to_utf8_chars_delegate(void* p_self, void* r_text, long p_max_write_length);

			public Native.GDExtensionInterface.string_to_utf16_chars_delegate string_to_utf16_chars;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate long string_to_utf16_chars_delegate(void* p_self, ushort* r_text, long p_max_write_length);

			public Native.GDExtensionInterface.string_to_utf32_chars_delegate string_to_utf32_chars;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate long string_to_utf32_chars_delegate(void* p_self, void* r_text, long p_max_write_length);

			public Native.GDExtensionInterface.string_to_wide_chars_delegate string_to_wide_chars;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate long string_to_wide_chars_delegate(void* p_self, char* r_text, long p_max_write_length);

			public Native.GDExtensionInterface.string_operator_index_delegate string_operator_index;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* string_operator_index_delegate(void* p_self, long p_index);

			public Native.GDExtensionInterface.string_operator_index_const_delegate string_operator_index_const;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* string_operator_index_const_delegate(void* p_self, long p_index);

			public Native.GDExtensionInterface.string_operator_plus_eq_string_delegate string_operator_plus_eq_string;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void string_operator_plus_eq_string_delegate(void* p_self, void* p_b);

			public Native.GDExtensionInterface.string_operator_plus_eq_char_delegate string_operator_plus_eq_char;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void string_operator_plus_eq_char_delegate(void* p_self,int p_b);

			public Native.GDExtensionInterface.string_operator_plus_eq_cstr_delegate string_operator_plus_eq_cstr;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void string_operator_plus_eq_cstr_delegate(void* p_self, [MarshalAs(UnmanagedType.LPStr)] string p_b);

			public Native.GDExtensionInterface.string_operator_plus_eq_wcstr_delegate string_operator_plus_eq_wcstr;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void string_operator_plus_eq_wcstr_delegate(void* p_self, char* p_b);

			public Native.GDExtensionInterface.string_operator_plus_eq_c32str_delegate string_operator_plus_eq_c32str;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void string_operator_plus_eq_c32str_delegate(void* p_self, void* p_b);

			/// <summary>
			/// XMLParser extra utilities
			/// </summary>
			public Native.GDExtensionInterface.xml_parser_open_buffer_delegate xml_parser_open_buffer;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate long xml_parser_open_buffer_delegate(void* p_instance, byte* p_buffer, ulong p_size);

			/// <summary>
			/// FileAccess extra utilities
			/// </summary>
			public Native.GDExtensionInterface.file_access_store_buffer_delegate file_access_store_buffer;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void file_access_store_buffer_delegate(void* p_instance, byte* p_src, ulong p_length);

			public Native.GDExtensionInterface.file_access_get_buffer_delegate file_access_get_buffer;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate ulong file_access_get_buffer_delegate(void* p_instance, byte* p_dst, ulong p_length);

			/// <summary>
			/// WorkerThreadPool extra utilities
			/// </summary>
			public Native.GDExtensionInterface.worker_thread_pool_add_native_group_task_delegate worker_thread_pool_add_native_group_task;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate long worker_thread_pool_add_native_group_task_delegate(void* p_instance, Native.GDExtensionInterface.p_func_delegate p_func, void* p_userdata, int p_elements, int p_tasks, byte p_high_priority, void* p_description);

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void p_func_delegate(void* arg0, uint arg1);

			public Native.GDExtensionInterface.worker_thread_pool_add_native_task_delegate worker_thread_pool_add_native_task;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate long worker_thread_pool_add_native_task_delegate(void* p_instance, Native.GDExtensionInterface.p_func_delegateOne p_func, void* p_userdata, byte p_high_priority, void* p_description);

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void p_func_delegateOne(void* arg0);

			/// <summary>
			/// p_self should be a PackedByteArray
			/// </summary>
			public Native.GDExtensionInterface.packed_byte_array_operator_index_delegate packed_byte_array_operator_index;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_byte_array_operator_index_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedByteArray
			/// </summary>
			public Native.GDExtensionInterface.packed_byte_array_operator_index_const_delegate packed_byte_array_operator_index_const;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_byte_array_operator_index_const_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedColorArray, returns Color ptr
			/// </summary>
			public Native.GDExtensionInterface.packed_color_array_operator_index_delegate packed_color_array_operator_index;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_color_array_operator_index_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedColorArray, returns Color ptr
			/// </summary>
			public Native.GDExtensionInterface.packed_color_array_operator_index_const_delegate packed_color_array_operator_index_const;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_color_array_operator_index_const_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedFloat32Array
			/// </summary>
			public Native.GDExtensionInterface.packed_float32_array_operator_index_delegate packed_float32_array_operator_index;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_float32_array_operator_index_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedFloat32Array
			/// </summary>
			public Native.GDExtensionInterface.packed_float32_array_operator_index_const_delegate packed_float32_array_operator_index_const;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_float32_array_operator_index_const_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedFloat64Array
			/// </summary>
			public Native.GDExtensionInterface.packed_float64_array_operator_index_delegate packed_float64_array_operator_index;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_float64_array_operator_index_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedFloat64Array
			/// </summary>
			public Native.GDExtensionInterface.packed_float64_array_operator_index_const_delegate packed_float64_array_operator_index_const;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_float64_array_operator_index_const_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedInt32Array
			/// </summary>
			public Native.GDExtensionInterface.packed_int32_array_operator_index_delegate packed_int32_array_operator_index;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_int32_array_operator_index_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedInt32Array
			/// </summary>
			public Native.GDExtensionInterface.packed_int32_array_operator_index_const_delegate packed_int32_array_operator_index_const;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_int32_array_operator_index_const_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedInt32Array
			/// </summary>
			public Native.GDExtensionInterface.packed_int64_array_operator_index_delegate packed_int64_array_operator_index;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_int64_array_operator_index_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedInt32Array
			/// </summary>
			public Native.GDExtensionInterface.packed_int64_array_operator_index_const_delegate packed_int64_array_operator_index_const;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_int64_array_operator_index_const_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedStringArray
			/// </summary>
			public Native.GDExtensionInterface.packed_string_array_operator_index_delegate packed_string_array_operator_index;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_string_array_operator_index_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedStringArray
			/// </summary>
			public Native.GDExtensionInterface.packed_string_array_operator_index_const_delegate packed_string_array_operator_index_const;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_string_array_operator_index_const_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedVector2Array, returns Vector2 ptr
			/// </summary>
			public Native.GDExtensionInterface.packed_vector2_array_operator_index_delegate packed_vector2_array_operator_index;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_vector2_array_operator_index_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedVector2Array, returns Vector2 ptr
			/// </summary>
			public Native.GDExtensionInterface.packed_vector2_array_operator_index_const_delegate packed_vector2_array_operator_index_const;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_vector2_array_operator_index_const_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedVector3Array, returns Vector3 ptr
			/// </summary>
			public Native.GDExtensionInterface.packed_vector3_array_operator_index_delegate packed_vector3_array_operator_index;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_vector3_array_operator_index_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be a PackedVector3Array, returns Vector3 ptr
			/// </summary>
			public Native.GDExtensionInterface.packed_vector3_array_operator_index_const_delegate packed_vector3_array_operator_index_const;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* packed_vector3_array_operator_index_const_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be an Array ptr
			/// </summary>
			public Native.GDExtensionInterface.array_operator_index_delegate array_operator_index;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* array_operator_index_delegate(void* p_self, long p_index);

			/// <summary>
			/// p_self should be an Array ptr
			/// </summary>
			public Native.GDExtensionInterface.array_operator_index_const_delegate array_operator_index_const;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* array_operator_index_const_delegate(void* p_self, long p_index);

            public Native.GDExtensionInterface.array_ref_delegate array_ref;// void (*array_ref)(GDExtensionTypePtr p_self, GDExtensionConstTypePtr p_from); // p_self should be an Array ptr

            [UnmanagedFunctionPointer(CallingConvention.StdCall)]
            public delegate void array_ref_delegate(void* p_self, void* p_from);

            public Native.GDExtensionInterface.array_set_typed_delegate array_set_typed;// void (*array_set_typed)(GDExtensionTypePtr p_self, uint32_t p_type, GDExtensionConstStringNamePtr p_class_name, GDExtensionConstVariantPtr p_script); // p_self should be an Array ptr

            [UnmanagedFunctionPointer(CallingConvention.StdCall)]
            public delegate void array_set_typed_delegate(void* p_self, uint p_type, void* p_class_name, void* p_script);

            /// <summary>
            /// p_self should be an Dictionary ptr
            /// </summary>
            public Native.GDExtensionInterface.dictionary_operator_index_delegate dictionary_operator_index;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* dictionary_operator_index_delegate(void* p_self, void* p_key);

			/// <summary>
			/// p_self should be an Dictionary ptr
			/// </summary>
			public Native.GDExtensionInterface.dictionary_operator_index_const_delegate dictionary_operator_index_const;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* dictionary_operator_index_const_delegate(void* p_self, void* p_key);

			/// <summary>
			/// OBJECT
			/// </summary>
			public Native.GDExtensionInterface.object_method_bind_call_delegate object_method_bind_call;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void object_method_bind_call_delegate(void* p_method_bind, void* p_instance, void** p_args, long p_arg_count, void* r_ret, Native.GDExtensionCallError* r_error);

			public Native.GDExtensionInterface.object_method_bind_ptrcall_delegate object_method_bind_ptrcall;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void object_method_bind_ptrcall_delegate(void* p_method_bind, void* p_instance, void** p_args, void* r_ret);

			public Native.GDExtensionInterface.object_destroy_delegate object_destroy;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void object_destroy_delegate(void* p_o);

			public Native.GDExtensionInterface.global_get_singleton_delegate global_get_singleton;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* global_get_singleton_delegate(void* p_name);

			public Native.GDExtensionInterface.object_get_instance_binding_delegate object_get_instance_binding;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* object_get_instance_binding_delegate(void* p_o, void* p_token, in Native.GDExtensionInstanceBindingCallbacks p_callbacks);

			public Native.GDExtensionInterface.object_set_instance_binding_delegate object_set_instance_binding;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void object_set_instance_binding_delegate(void* p_o, void* p_token, void* p_binding, in Native.GDExtensionInstanceBindingCallbacks p_callbacks);

			/// <summary>
			/// p_classname should be a registered extension class and should extend the p_o object's class.
			/// </summary>
			public Native.GDExtensionInterface.object_set_instance_delegate object_set_instance;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void object_set_instance_delegate(void* p_o, void* p_classname, void* p_instance);

			public Native.GDExtensionInterface.object_cast_to_delegate object_cast_to;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* object_cast_to_delegate(void* p_object, void* p_class_tag);

			public Native.GDExtensionInterface.object_get_instance_from_id_delegate object_get_instance_from_id;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* object_get_instance_from_id_delegate(ulong p_instance_id);

			public Native.GDExtensionInterface.object_get_instance_id_delegate object_get_instance_id;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate ulong object_get_instance_id_delegate(void* p_object);

			/// <summary>
			/// REFERENCE
			/// </summary>
			public Native.GDExtensionInterface.ref_get_object_delegate ref_get_object;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* ref_get_object_delegate(void* p_ref);

			public Native.GDExtensionInterface.ref_set_object_delegate ref_set_object;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void ref_set_object_delegate(void* p_ref, void* p_object);

			/// <summary>
			/// SCRIPT INSTANCE
			/// </summary>
			public Native.GDExtensionInterface.script_instance_create_delegate script_instance_create;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* script_instance_create_delegate(in Native.GDExtensionScriptInstanceInfo p_info, void* p_instance_data);

			/// <summary>
			/// The passed class must be a built-in godot class, or an already-registered extension class. In both case, object_set_instance should be called to fully initialize the object.
			/// </summary>
			public Native.GDExtensionInterface.classdb_construct_object_delegate classdb_construct_object;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* classdb_construct_object_delegate(void* p_classname);

			public Native.GDExtensionInterface.classdb_get_method_bind_delegate classdb_get_method_bind;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* classdb_get_method_bind_delegate(void* p_classname, void* p_methodname, long p_hash);

			public Native.GDExtensionInterface.classdb_get_class_tag_delegate classdb_get_class_tag;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void* classdb_get_class_tag_delegate(void* p_classname);

			/// <summary>
			/// Provided parameters for `classdb_register_extension_*` can be safely freed once the function returns.
			/// </summary>
			public Native.GDExtensionInterface.classdb_register_extension_class_delegate classdb_register_extension_class;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void classdb_register_extension_class_delegate(void* p_library, void* p_class_name, void* p_parent_class_name, in Native.GDExtensionClassCreationInfo p_extension_funcs);

			public Native.GDExtensionInterface.classdb_register_extension_class_method_delegate classdb_register_extension_class_method;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void classdb_register_extension_class_method_delegate(void* p_library, void* p_class_name, in Native.GDExtensionClassMethodInfo p_method_info);

			public Native.GDExtensionInterface.classdb_register_extension_class_integer_constant_delegate classdb_register_extension_class_integer_constant;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void classdb_register_extension_class_integer_constant_delegate(void* p_library, void* p_class_name, void* p_enum_name, void* p_constant_name, long p_constant_value, byte p_is_bitfield);

			public Native.GDExtensionInterface.classdb_register_extension_class_property_delegate classdb_register_extension_class_property;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void classdb_register_extension_class_property_delegate(void* p_library, void* p_class_name, in Native.GDExtensionPropertyInfo p_info, void* p_setter, void* p_getter);

			public Native.GDExtensionInterface.classdb_register_extension_class_property_group_delegate classdb_register_extension_class_property_group;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void classdb_register_extension_class_property_group_delegate(void* p_library, void* p_class_name, void* p_group_name, void* p_prefix);

			public Native.GDExtensionInterface.classdb_register_extension_class_property_subgroup_delegate classdb_register_extension_class_property_subgroup;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void classdb_register_extension_class_property_subgroup_delegate(void* p_library, void* p_class_name, void* p_subgroup_name, void* p_prefix);

			public Native.GDExtensionInterface.classdb_register_extension_class_signal_delegate classdb_register_extension_class_signal;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void classdb_register_extension_class_signal_delegate(void* p_library, void* p_class_name, void* p_signal_name, in Native.GDExtensionPropertyInfo p_argument_info, long p_argument_count);

			/// <summary>
			/// Unregistering a parent class before a class that inherits it will result in failure. Inheritors must be unregistered first.
			/// </summary>
			public Native.GDExtensionInterface.classdb_unregister_extension_class_delegate classdb_unregister_extension_class;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void classdb_unregister_extension_class_delegate(void* p_library, void* p_class_name);

			public Native.GDExtensionInterface.get_library_path_delegate get_library_path;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void get_library_path_delegate(void* p_library, void* r_path);

			public void* MoveToUnmanaged<T>(T value) where T : unmanaged
			{
				var ptr = (T*)mem_alloc((nuint)sizeof(T));
				*ptr = value;
				return ptr;
			}
		}

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionVariantFromTypeConstructorFunc(void* arg0, void* arg1);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionTypeFromVariantConstructorFunc(void* arg0, void* arg1);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionPtrOperatorEvaluator(void* p_left, void* p_right, void* r_result);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionPtrBuiltInMethod(void* p_base, void** p_args, void* r_return, int p_argument_count);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionPtrConstructor(void* p_base, void** p_args);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionPtrDestructor(void* p_base);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionPtrSetter(void* p_base, void* p_value);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionPtrGetter(void* p_base, void* r_value);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionPtrIndexedSetter(void* p_base, long p_index, void* p_value);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionPtrIndexedGetter(void* p_base, long p_index, void* r_value);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionPtrKeyedSetter(void* p_base, void* p_key, void* p_value);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionPtrKeyedGetter(void* p_base, void* p_key, void* r_value);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate uint GDExtensionPtrKeyedChecker(void* p_base, void* p_key);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void GDExtensionPtrUtilityFunction(void* r_return, void** p_args, int p_argument_count);

		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
		public struct GDExtensionInitialization
		{
			/// <summary>
			/// Minimum initialization level required.
			/// If Core or Servers, the extension needs editor or game restart to take effect
			/// </summary>
			public Native.GDExtensionInitializationLevel minimum_initialization_level;

			/// <summary>
			/// Up to the user to supply when initializing
			/// </summary>
			public void* userdata;

			/// <summary>
			/// This function will be called multiple times for each initialization level.
			/// </summary>
			public IntPtr initialize;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void initialize_delegate(void* userdata, Native.GDExtensionInitializationLevel p_level);

			public IntPtr deinitialize;

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			public delegate void deinitialize_delegate(void* userdata, Native.GDExtensionInitializationLevel p_level);
		}

	}
}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
