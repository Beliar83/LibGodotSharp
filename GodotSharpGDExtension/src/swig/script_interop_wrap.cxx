/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGCSHARP
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_DotnetScriptInterop(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_DotnetScriptInterop(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_DotnetScriptInterop(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "fsharp_method_info.h"


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< godot::PropertyInfo > *new_std_vector_Sl_godot_PropertyInfo_Sg___SWIG_2(int capacity){
        std::vector< godot::PropertyInfo >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< godot::PropertyInfo >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN godot::PropertyInfo std_vector_Sl_godot_PropertyInfo_Sg__getitemcopy(std::vector< godot::PropertyInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< godot::PropertyInfo >::value_type const &std_vector_Sl_godot_PropertyInfo_Sg__getitem(std::vector< godot::PropertyInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_godot_PropertyInfo_Sg__setitem(std::vector< godot::PropertyInfo > *self,int index,godot::PropertyInfo const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_godot_PropertyInfo_Sg__AddRange(std::vector< godot::PropertyInfo > *self,std::vector< godot::PropertyInfo > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< godot::PropertyInfo > *std_vector_Sl_godot_PropertyInfo_Sg__GetRange(std::vector< godot::PropertyInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< godot::PropertyInfo >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_godot_PropertyInfo_Sg__Insert(std::vector< godot::PropertyInfo > *self,int index,godot::PropertyInfo const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_godot_PropertyInfo_Sg__InsertRange(std::vector< godot::PropertyInfo > *self,int index,std::vector< godot::PropertyInfo > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_godot_PropertyInfo_Sg__RemoveAt(std::vector< godot::PropertyInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_godot_PropertyInfo_Sg__RemoveRange(std::vector< godot::PropertyInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< godot::PropertyInfo > *std_vector_Sl_godot_PropertyInfo_Sg__Repeat(godot::PropertyInfo const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< godot::PropertyInfo >(count, value);
      }
SWIGINTERN void std_vector_Sl_godot_PropertyInfo_Sg__Reverse__SWIG_0(std::vector< godot::PropertyInfo > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_godot_PropertyInfo_Sg__Reverse__SWIG_1(std::vector< godot::PropertyInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_godot_PropertyInfo_Sg__SetRange(std::vector< godot::PropertyInfo > *self,int index,std::vector< godot::PropertyInfo > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "fsharp_script.h"
#include "fsharp_method_info.h"

SWIGINTERN std::vector< FSharpMethodInfo > *new_std_vector_Sl_FSharpMethodInfo_Sg___SWIG_2(int capacity){
        std::vector< FSharpMethodInfo >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< FSharpMethodInfo >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN FSharpMethodInfo std_vector_Sl_FSharpMethodInfo_Sg__getitemcopy(std::vector< FSharpMethodInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< FSharpMethodInfo >::value_type const &std_vector_Sl_FSharpMethodInfo_Sg__getitem(std::vector< FSharpMethodInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FSharpMethodInfo_Sg__setitem(std::vector< FSharpMethodInfo > *self,int index,FSharpMethodInfo const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FSharpMethodInfo_Sg__AddRange(std::vector< FSharpMethodInfo > *self,std::vector< FSharpMethodInfo > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< FSharpMethodInfo > *std_vector_Sl_FSharpMethodInfo_Sg__GetRange(std::vector< FSharpMethodInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< FSharpMethodInfo >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_FSharpMethodInfo_Sg__Insert(std::vector< FSharpMethodInfo > *self,int index,FSharpMethodInfo const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FSharpMethodInfo_Sg__InsertRange(std::vector< FSharpMethodInfo > *self,int index,std::vector< FSharpMethodInfo > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FSharpMethodInfo_Sg__RemoveAt(std::vector< FSharpMethodInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FSharpMethodInfo_Sg__RemoveRange(std::vector< FSharpMethodInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< FSharpMethodInfo > *std_vector_Sl_FSharpMethodInfo_Sg__Repeat(FSharpMethodInfo const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< FSharpMethodInfo >(count, value);
      }
SWIGINTERN void std_vector_Sl_FSharpMethodInfo_Sg__Reverse__SWIG_0(std::vector< FSharpMethodInfo > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_FSharpMethodInfo_Sg__Reverse__SWIG_1(std::vector< FSharpMethodInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_FSharpMethodInfo_Sg__SetRange(std::vector< FSharpMethodInfo > *self,int index,std::vector< FSharpMethodInfo > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include <iostream>

     void test(const char* text) {
         std::cout << text << std::endl;
         WARN_PRINT(text);
     }

#include "fsharp_script.h"

void print_script_info(FSharpScript* script);




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "script_interop_wrap.h"

SwigDirector_FSharpScript::SwigDirector_FSharpScript() : FSharpScript(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_FSharpScript::~SwigDirector_FSharpScript() {
  
}


std::vector< FSharpMethodInfo > SwigDirector_FSharpScript::_getMethods() {
  std::vector< FSharpMethodInfo > c_result ;
  void * jresult = 0 ;
  
  if (!swig_callback_getMethods) {
    return FSharpScript::_getMethods();
  } else {
    jresult = (void *) swig_callback_getMethods();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type std::vector< FSharpMethodInfo >", 0);
      return c_result;
    }
    c_result = *(std::vector< FSharpMethodInfo > *)jresult; 
  }
  return c_result;
}

void SwigDirector_FSharpScript::swig_connect_director(SWIG_Callback0_t callback_getMethods) {
  swig_callback_getMethods = callback_getMethods;
}

void SwigDirector_FSharpScript::swig_init_callbacks() {
  swig_callback_getMethods = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfoVector_Clear(void * jarg1) {
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfoVector_Add(void * jarg1, void * jarg2) {
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  godot::PropertyInfo *arg2 = 0 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  arg2 = (godot::PropertyInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::PropertyInfo const & is null", 0);
    return ;
  } 
  (arg1)->push_back((godot::PropertyInfo const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PropertyInfoVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  std::vector< godot::PropertyInfo >::size_type result;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  result = ((std::vector< godot::PropertyInfo > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PropertyInfoVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  std::vector< godot::PropertyInfo >::size_type result;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  result = ((std::vector< godot::PropertyInfo > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfoVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  std::vector< godot::PropertyInfo >::size_type arg2 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  arg2 = (std::vector< godot::PropertyInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PropertyInfoVector__SWIG_0() {
  void * jresult ;
  std::vector< godot::PropertyInfo > *result = 0 ;
  
  result = (std::vector< godot::PropertyInfo > *)new std::vector< godot::PropertyInfo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PropertyInfoVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< godot::PropertyInfo > *arg1 = 0 ;
  std::vector< godot::PropertyInfo > *result = 0 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< godot::PropertyInfo > const & is null", 0);
    return 0;
  } 
  result = (std::vector< godot::PropertyInfo > *)new std::vector< godot::PropertyInfo >((std::vector< godot::PropertyInfo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PropertyInfoVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< godot::PropertyInfo > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< godot::PropertyInfo > *)new_std_vector_Sl_godot_PropertyInfo_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PropertyInfoVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  int arg2 ;
  godot::PropertyInfo result;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_godot_PropertyInfo_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new godot::PropertyInfo(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PropertyInfoVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  int arg2 ;
  std::vector< godot::PropertyInfo >::value_type *result = 0 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< godot::PropertyInfo >::value_type *) &std_vector_Sl_godot_PropertyInfo_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfoVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  int arg2 ;
  godot::PropertyInfo *arg3 = 0 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (godot::PropertyInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::PropertyInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_godot_PropertyInfo_Sg__setitem(arg1,arg2,(godot::PropertyInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfoVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  std::vector< godot::PropertyInfo > *arg2 = 0 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  arg2 = (std::vector< godot::PropertyInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< godot::PropertyInfo > const & is null", 0);
    return ;
  } 
  std_vector_Sl_godot_PropertyInfo_Sg__AddRange(arg1,(std::vector< godot::PropertyInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PropertyInfoVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< godot::PropertyInfo > *result = 0 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< godot::PropertyInfo > *)std_vector_Sl_godot_PropertyInfo_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfoVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  int arg2 ;
  godot::PropertyInfo *arg3 = 0 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (godot::PropertyInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::PropertyInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_godot_PropertyInfo_Sg__Insert(arg1,arg2,(godot::PropertyInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfoVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  int arg2 ;
  std::vector< godot::PropertyInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< godot::PropertyInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< godot::PropertyInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_godot_PropertyInfo_Sg__InsertRange(arg1,arg2,(std::vector< godot::PropertyInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfoVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_godot_PropertyInfo_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfoVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_godot_PropertyInfo_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PropertyInfoVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  godot::PropertyInfo *arg1 = 0 ;
  int arg2 ;
  std::vector< godot::PropertyInfo > *result = 0 ;
  
  arg1 = (godot::PropertyInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::PropertyInfo const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< godot::PropertyInfo > *)std_vector_Sl_godot_PropertyInfo_Sg__Repeat((godot::PropertyInfo const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfoVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  std_vector_Sl_godot_PropertyInfo_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfoVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_godot_PropertyInfo_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfoVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  int arg2 ;
  std::vector< godot::PropertyInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< godot::PropertyInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< godot::PropertyInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_godot_PropertyInfo_Sg__SetRange(arg1,arg2,(std::vector< godot::PropertyInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PropertyInfoVector(void * jarg1) {
  std::vector< godot::PropertyInfo > *arg1 = (std::vector< godot::PropertyInfo > *) 0 ;
  
  arg1 = (std::vector< godot::PropertyInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FSharpMethodInfo_Name_set(void * jarg1, void * jarg2) {
  FSharpMethodInfo *arg1 = (FSharpMethodInfo *) 0 ;
  godot::String *arg2 = (godot::String *) 0 ;
  
  arg1 = (FSharpMethodInfo *)jarg1; 
  arg2 = (godot::String *)jarg2; 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FSharpMethodInfo_Name_get(void * jarg1) {
  void * jresult ;
  FSharpMethodInfo *arg1 = (FSharpMethodInfo *) 0 ;
  godot::String *result = 0 ;
  
  arg1 = (FSharpMethodInfo *)jarg1; 
  result = (godot::String *)& ((arg1)->Name);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FSharpMethodInfo_args_set(void * jarg1, void * jarg2) {
  FSharpMethodInfo *arg1 = (FSharpMethodInfo *) 0 ;
  std::vector< godot::PropertyInfo > *arg2 = (std::vector< godot::PropertyInfo > *) 0 ;
  
  arg1 = (FSharpMethodInfo *)jarg1; 
  arg2 = (std::vector< godot::PropertyInfo > *)jarg2; 
  if (arg1) (arg1)->args = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FSharpMethodInfo_args_get(void * jarg1) {
  void * jresult ;
  FSharpMethodInfo *arg1 = (FSharpMethodInfo *) 0 ;
  std::vector< godot::PropertyInfo > *result = 0 ;
  
  arg1 = (FSharpMethodInfo *)jarg1; 
  result = (std::vector< godot::PropertyInfo > *)& ((arg1)->args);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FSharpMethodInfo() {
  void * jresult ;
  FSharpMethodInfo *result = 0 ;
  
  result = (FSharpMethodInfo *)new FSharpMethodInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FSharpMethodInfo(void * jarg1) {
  FSharpMethodInfo *arg1 = (FSharpMethodInfo *) 0 ;
  
  arg1 = (FSharpMethodInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MethodInfoVector_Clear(void * jarg1) {
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MethodInfoVector_Add(void * jarg1, void * jarg2) {
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  FSharpMethodInfo *arg2 = 0 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  arg2 = (FSharpMethodInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FSharpMethodInfo const & is null", 0);
    return ;
  } 
  (arg1)->push_back((FSharpMethodInfo const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MethodInfoVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  std::vector< FSharpMethodInfo >::size_type result;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  result = ((std::vector< FSharpMethodInfo > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MethodInfoVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  std::vector< FSharpMethodInfo >::size_type result;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  result = ((std::vector< FSharpMethodInfo > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MethodInfoVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  std::vector< FSharpMethodInfo >::size_type arg2 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  arg2 = (std::vector< FSharpMethodInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MethodInfoVector__SWIG_0() {
  void * jresult ;
  std::vector< FSharpMethodInfo > *result = 0 ;
  
  result = (std::vector< FSharpMethodInfo > *)new std::vector< FSharpMethodInfo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MethodInfoVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< FSharpMethodInfo > *arg1 = 0 ;
  std::vector< FSharpMethodInfo > *result = 0 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FSharpMethodInfo > const & is null", 0);
    return 0;
  } 
  result = (std::vector< FSharpMethodInfo > *)new std::vector< FSharpMethodInfo >((std::vector< FSharpMethodInfo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MethodInfoVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< FSharpMethodInfo > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< FSharpMethodInfo > *)new_std_vector_Sl_FSharpMethodInfo_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MethodInfoVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  int arg2 ;
  FSharpMethodInfo result;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_FSharpMethodInfo_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new FSharpMethodInfo(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MethodInfoVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  int arg2 ;
  std::vector< FSharpMethodInfo >::value_type *result = 0 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< FSharpMethodInfo >::value_type *) &std_vector_Sl_FSharpMethodInfo_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MethodInfoVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  int arg2 ;
  FSharpMethodInfo *arg3 = 0 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FSharpMethodInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FSharpMethodInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FSharpMethodInfo_Sg__setitem(arg1,arg2,(FSharpMethodInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MethodInfoVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  std::vector< FSharpMethodInfo > *arg2 = 0 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  arg2 = (std::vector< FSharpMethodInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FSharpMethodInfo > const & is null", 0);
    return ;
  } 
  std_vector_Sl_FSharpMethodInfo_Sg__AddRange(arg1,(std::vector< FSharpMethodInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MethodInfoVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< FSharpMethodInfo > *result = 0 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< FSharpMethodInfo > *)std_vector_Sl_FSharpMethodInfo_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MethodInfoVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  int arg2 ;
  FSharpMethodInfo *arg3 = 0 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FSharpMethodInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FSharpMethodInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FSharpMethodInfo_Sg__Insert(arg1,arg2,(FSharpMethodInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MethodInfoVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  int arg2 ;
  std::vector< FSharpMethodInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< FSharpMethodInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FSharpMethodInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FSharpMethodInfo_Sg__InsertRange(arg1,arg2,(std::vector< FSharpMethodInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MethodInfoVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_FSharpMethodInfo_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MethodInfoVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_FSharpMethodInfo_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MethodInfoVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  FSharpMethodInfo *arg1 = 0 ;
  int arg2 ;
  std::vector< FSharpMethodInfo > *result = 0 ;
  
  arg1 = (FSharpMethodInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FSharpMethodInfo const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< FSharpMethodInfo > *)std_vector_Sl_FSharpMethodInfo_Sg__Repeat((FSharpMethodInfo const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MethodInfoVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  std_vector_Sl_FSharpMethodInfo_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MethodInfoVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_FSharpMethodInfo_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MethodInfoVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  int arg2 ;
  std::vector< FSharpMethodInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< FSharpMethodInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FSharpMethodInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FSharpMethodInfo_Sg__SetRange(arg1,arg2,(std::vector< FSharpMethodInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MethodInfoVector(void * jarg1) {
  std::vector< FSharpMethodInfo > *arg1 = (std::vector< FSharpMethodInfo > *) 0 ;
  
  arg1 = (std::vector< FSharpMethodInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FSharpScript(void * jarg1) {
  FSharpScript *arg1 = (FSharpScript *) 0 ;
  
  arg1 = (FSharpScript *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FSharpScript__getMethods(void * jarg1) {
  void * jresult ;
  FSharpScript *arg1 = (FSharpScript *) 0 ;
  std::vector< FSharpMethodInfo > result;
  
  arg1 = (FSharpScript *)jarg1; 
  result = (arg1)->_getMethods();
  jresult = new std::vector< FSharpMethodInfo >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FSharpScript__getMethodsSwigExplicitFSharpScript(void * jarg1) {
  void * jresult ;
  FSharpScript *arg1 = (FSharpScript *) 0 ;
  std::vector< FSharpMethodInfo > result;
  
  arg1 = (FSharpScript *)jarg1; 
  result = (arg1)->FSharpScript::_getMethods();
  jresult = new std::vector< FSharpMethodInfo >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FSharpScript() {
  void * jresult ;
  FSharpScript *result = 0 ;
  
  result = (FSharpScript *)new SwigDirector_FSharpScript();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FSharpScript_director_connect(void *objarg, SwigDirector_FSharpScript::SWIG_Callback0_t callback0) {
  FSharpScript *obj = (FSharpScript *)objarg;
  SwigDirector_FSharpScript *director = static_cast<SwigDirector_FSharpScript *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void SWIGSTDCALL CSharp_test(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  test((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_print_script_info(void * jarg1) {
  FSharpScript *arg1 = (FSharpScript *) 0 ;
  
  arg1 = (FSharpScript *)jarg1; 
  print_script_info(arg1);
}


#ifdef __cplusplus
}
#endif

