/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_GodotSharpSwig(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_GodotSharpSwig(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_GodotSharpSwig(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "godot_cpp/classes/global_constants.hpp"


/* Includes the header in the wrapper code */
#include "godot_cpp/variant/array.hpp"


/* Includes the header in the wrapper code */
#include "godot_cpp/variant/typed_array.hpp"


/* Includes the header in the wrapper code */
#include "godot_cpp/variant/string.hpp"
#include "godot_cpp/variant/char_string.hpp"
#include "godot_cpp/variant/char_utils.hpp"
#include "godot_cpp/variant/packed_byte_array.hpp"
#include "godot_cpp/variant/packed_string_array.hpp"
#include "godot_cpp/variant/packed_float64_array.hpp"



#include <memory>

SWIGINTERN char const *godot_String_AsString(godot::String *self){
		return self->ascii().get_data();
	}

/* Includes the header in the wrapper code */
#include "godot_cpp/variant/string_name.hpp"


/* Includes the header in the wrapper code */
#include "godot_cpp/classes/object.hpp"


/* Includes the header in the wrapper code */
#include "godot_cpp/classes/node.hpp"
#include "godot_cpp/core/type_info.hpp"


#include "godot_cpp/variant/variant.hpp"


#include "godot_cpp/core/property_info.hpp"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_GodotString__SWIG_0() {
  void * jresult ;
  godot::String *result = 0 ;
  
  result = (godot::String *)new godot::String();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GodotString__SWIG_1(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = 0 ;
  godot::String *result = 0 ;
  
  arg1 = (godot::String *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (godot::String *)new godot::String((godot::String const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GodotString__SWIG_2(void * jarg1) {
  void * jresult ;
  godot::StringName *arg1 = 0 ;
  godot::String *result = 0 ;
  
  arg1 = (godot::StringName *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = (godot::String *)new godot::String((godot::StringName const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GodotString__SWIG_3(void * jarg1) {
  void * jresult ;
  godot::NodePath *arg1 = 0 ;
  godot::String *result = 0 ;
  
  arg1 = (godot::NodePath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::NodePath const & is null", 0);
    return 0;
  } 
  result = (godot::String *)new godot::String((godot::NodePath const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GodotString__SWIG_5(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  godot::String *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (godot::String *)new godot::String((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GodotString(void * jarg1) {
  godot::String *arg1 = (godot::String *) 0 ;
  
  arg1 = (godot::String *)jarg1; 
  delete arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_casecmp_to(void * jarg1, void * jarg2) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (int64_t)((godot::String const *)arg1)->casecmp_to((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_nocasecmp_to(void * jarg1, void * jarg2) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (int64_t)((godot::String const *)arg1)->nocasecmp_to((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_naturalcasecmp_to(void * jarg1, void * jarg2) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (int64_t)((godot::String const *)arg1)->naturalcasecmp_to((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_naturalnocasecmp_to(void * jarg1, void * jarg2) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (int64_t)((godot::String const *)arg1)->naturalnocasecmp_to((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_length(void * jarg1) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  result = (int64_t)((godot::String const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_substr__SWIG_0(void * jarg1, long long jarg2, long long jarg3) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = ((godot::String const *)arg1)->substr(arg2,arg3);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_substr__SWIG_1(void * jarg1, long long jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = ((godot::String const *)arg1)->substr(arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_get_slice(void * jarg1, void * jarg2, long long jarg3) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t arg3 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = (int64_t)jarg3; 
  result = ((godot::String const *)arg1)->get_slice((godot::String const &)*arg2,arg3);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_get_slicec(void * jarg1, long long jarg2, long long jarg3) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = ((godot::String const *)arg1)->get_slicec(arg2,arg3);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_get_slice_count(void * jarg1, void * jarg2) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (int64_t)((godot::String const *)arg1)->get_slice_count((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_find__SWIG_0(void * jarg1, void * jarg2, long long jarg3) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t arg3 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = (int64_t)jarg3; 
  result = (int64_t)((godot::String const *)arg1)->find((godot::String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_find__SWIG_1(void * jarg1, void * jarg2) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (int64_t)((godot::String const *)arg1)->find((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_count__SWIG_0(void * jarg1, void * jarg2, long long jarg3, long long jarg4) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  result = (int64_t)((godot::String const *)arg1)->count((godot::String const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_count__SWIG_1(void * jarg1, void * jarg2, long long jarg3) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t arg3 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = (int64_t)jarg3; 
  result = (int64_t)((godot::String const *)arg1)->count((godot::String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_count__SWIG_2(void * jarg1, void * jarg2) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (int64_t)((godot::String const *)arg1)->count((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_countn__SWIG_0(void * jarg1, void * jarg2, long long jarg3, long long jarg4) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  result = (int64_t)((godot::String const *)arg1)->countn((godot::String const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_countn__SWIG_1(void * jarg1, void * jarg2, long long jarg3) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t arg3 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = (int64_t)jarg3; 
  result = (int64_t)((godot::String const *)arg1)->countn((godot::String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_countn__SWIG_2(void * jarg1, void * jarg2) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (int64_t)((godot::String const *)arg1)->countn((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_findn__SWIG_0(void * jarg1, void * jarg2, long long jarg3) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t arg3 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = (int64_t)jarg3; 
  result = (int64_t)((godot::String const *)arg1)->findn((godot::String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_findn__SWIG_1(void * jarg1, void * jarg2) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (int64_t)((godot::String const *)arg1)->findn((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_rfind__SWIG_0(void * jarg1, void * jarg2, long long jarg3) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t arg3 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = (int64_t)jarg3; 
  result = (int64_t)((godot::String const *)arg1)->rfind((godot::String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_rfind__SWIG_1(void * jarg1, void * jarg2) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (int64_t)((godot::String const *)arg1)->rfind((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_rfindn__SWIG_0(void * jarg1, void * jarg2, long long jarg3) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t arg3 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = (int64_t)jarg3; 
  result = (int64_t)((godot::String const *)arg1)->rfindn((godot::String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_rfindn__SWIG_1(void * jarg1, void * jarg2) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (int64_t)((godot::String const *)arg1)->rfindn((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_match(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::String const *)arg1)->match((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_matchn(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::String const *)arg1)->matchn((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_begins_with(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::String const *)arg1)->begins_with((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_ends_with(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::String const *)arg1)->ends_with((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_is_subsequence_of(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::String const *)arg1)->is_subsequence_of((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_is_subsequence_ofn(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::String const *)arg1)->is_subsequence_ofn((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_bigrams(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::PackedStringArray result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->bigrams();
  jresult = new godot::PackedStringArray(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GodotString_similarity(void * jarg1, void * jarg2) {
  double jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  double result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (double)((godot::String const *)arg1)->similarity((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_format__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::Variant *arg2 = 0 ;
  godot::String *arg3 = 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Variant const & is null", 0);
    return 0;
  } 
  arg3 = (godot::String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->format((godot::Variant const &)*arg2,(godot::String const &)*arg3);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_format__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::Variant *arg2 = 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Variant const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->format((godot::Variant const &)*arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_replace(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  godot::String *arg3 = 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = (godot::String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->replace((godot::String const &)*arg2,(godot::String const &)*arg3);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_replacen(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  godot::String *arg3 = 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = (godot::String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->replacen((godot::String const &)*arg2,(godot::String const &)*arg3);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_repeat(void * jarg1, long long jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = ((godot::String const *)arg1)->repeat(arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_insert(void * jarg1, long long jarg2, void * jarg3) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  godot::String *arg3 = 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (godot::String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->insert(arg2,(godot::String const &)*arg3);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_erase__SWIG_0(void * jarg1, long long jarg2, long long jarg3) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = ((godot::String const *)arg1)->erase(arg2,arg3);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_erase__SWIG_1(void * jarg1, long long jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = ((godot::String const *)arg1)->erase(arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_capitalize(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->capitalize();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_to_camel_case(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->to_camel_case();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_to_pascal_case(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->to_pascal_case();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_to_snake_case(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->to_snake_case();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_split__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, long long jarg4) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  bool arg3 ;
  int64_t arg4 ;
  godot::PackedStringArray result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int64_t)jarg4; 
  result = ((godot::String const *)arg1)->split((godot::String const &)*arg2,arg3,arg4);
  jresult = new godot::PackedStringArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_split__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  bool arg3 ;
  godot::PackedStringArray result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((godot::String const *)arg1)->split((godot::String const &)*arg2,arg3);
  jresult = new godot::PackedStringArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_split__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  godot::PackedStringArray result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->split((godot::String const &)*arg2);
  jresult = new godot::PackedStringArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_split__SWIG_3(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::PackedStringArray result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->split();
  jresult = new godot::PackedStringArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_rsplit__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, long long jarg4) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  bool arg3 ;
  int64_t arg4 ;
  godot::PackedStringArray result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int64_t)jarg4; 
  result = ((godot::String const *)arg1)->rsplit((godot::String const &)*arg2,arg3,arg4);
  jresult = new godot::PackedStringArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_rsplit__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  bool arg3 ;
  godot::PackedStringArray result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((godot::String const *)arg1)->rsplit((godot::String const &)*arg2,arg3);
  jresult = new godot::PackedStringArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_rsplit__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  godot::PackedStringArray result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->rsplit((godot::String const &)*arg2);
  jresult = new godot::PackedStringArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_rsplit__SWIG_3(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::PackedStringArray result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->rsplit();
  jresult = new godot::PackedStringArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_split_floats__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  bool arg3 ;
  godot::PackedFloat64Array result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((godot::String const *)arg1)->split_floats((godot::String const &)*arg2,arg3);
  jresult = new godot::PackedFloat64Array(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_split_floats__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  godot::PackedFloat64Array result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->split_floats((godot::String const &)*arg2);
  jresult = new godot::PackedFloat64Array(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_join(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::PackedStringArray *arg2 = 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::PackedStringArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::PackedStringArray const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->join((godot::PackedStringArray const &)*arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_to_upper(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->to_upper();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_to_lower(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->to_lower();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_left(void * jarg1, long long jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = ((godot::String const *)arg1)->left(arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_right(void * jarg1, long long jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = ((godot::String const *)arg1)->right(arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_strip_edges__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  bool arg2 ;
  bool arg3 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = ((godot::String const *)arg1)->strip_edges(arg2,arg3);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_strip_edges__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  bool arg2 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((godot::String const *)arg1)->strip_edges(arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_strip_edges__SWIG_2(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->strip_edges();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_strip_escapes(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->strip_escapes();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_lstrip(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->lstrip((godot::String const &)*arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_rstrip(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->rstrip((godot::String const &)*arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_get_extension(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->get_extension();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_get_basename(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->get_basename();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_path_join(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->path_join((godot::String const &)*arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_unicode_at(void * jarg1, long long jarg2) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (int64_t)((godot::String const *)arg1)->unicode_at(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_indent(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->indent((godot::String const &)*arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_dedent(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->dedent();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_hash(void * jarg1) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  result = (int64_t)((godot::String const *)arg1)->hash();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_md5_text(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->md5_text();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_sha1_text(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->sha1_text();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_sha256_text(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->sha256_text();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_md5_buffer(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::PackedByteArray result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->md5_buffer();
  jresult = new godot::PackedByteArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_sha1_buffer(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::PackedByteArray result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->sha1_buffer();
  jresult = new godot::PackedByteArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_sha256_buffer(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::PackedByteArray result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->sha256_buffer();
  jresult = new godot::PackedByteArray(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_is_empty(void * jarg1) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  result = (bool)((godot::String const *)arg1)->is_empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::String const *)arg1)->contains((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_is_absolute_path(void * jarg1) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  result = (bool)((godot::String const *)arg1)->is_absolute_path();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_is_relative_path(void * jarg1) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  result = (bool)((godot::String const *)arg1)->is_relative_path();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_simplify_path(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->simplify_path();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_get_base_dir(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->get_base_dir();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_get_file(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->get_file();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_xml_escape__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  bool arg2 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((godot::String const *)arg1)->xml_escape(arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_xml_escape__SWIG_1(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->xml_escape();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_xml_unescape(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->xml_unescape();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_uri_encode(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->uri_encode();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_uri_decode(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->uri_decode();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_c_escape(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->c_escape();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_c_unescape(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->c_unescape();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_json_escape(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->json_escape();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_validate_node_name(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->validate_node_name();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_validate_filename(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->validate_filename();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_is_valid_identifier(void * jarg1) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  result = (bool)((godot::String const *)arg1)->is_valid_identifier();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_is_valid_int(void * jarg1) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  result = (bool)((godot::String const *)arg1)->is_valid_int();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_is_valid_float(void * jarg1) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  result = (bool)((godot::String const *)arg1)->is_valid_float();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_is_valid_hex_number__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((godot::String const *)arg1)->is_valid_hex_number(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_is_valid_hex_number__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  result = (bool)((godot::String const *)arg1)->is_valid_hex_number();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_is_valid_html_color(void * jarg1) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  result = (bool)((godot::String const *)arg1)->is_valid_html_color();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_is_valid_ip_address(void * jarg1) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  result = (bool)((godot::String const *)arg1)->is_valid_ip_address();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_is_valid_filename(void * jarg1) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  result = (bool)((godot::String const *)arg1)->is_valid_filename();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_to_int(void * jarg1) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  result = (int64_t)((godot::String const *)arg1)->to_int();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GodotString_to_float(void * jarg1) {
  double jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  double result;
  
  arg1 = (godot::String *)jarg1; 
  result = (double)((godot::String const *)arg1)->to_float();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_hex_to_int(void * jarg1) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  result = (int64_t)((godot::String const *)arg1)->hex_to_int();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GodotString_bin_to_int(void * jarg1) {
  long long jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t result;
  
  arg1 = (godot::String *)jarg1; 
  result = (int64_t)((godot::String const *)arg1)->bin_to_int();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_lpad__SWIG_0(void * jarg1, long long jarg2, void * jarg3) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  godot::String *arg3 = 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (godot::String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->lpad(arg2,(godot::String const &)*arg3);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_lpad__SWIG_1(void * jarg1, long long jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = ((godot::String const *)arg1)->lpad(arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_rpad__SWIG_0(void * jarg1, long long jarg2, void * jarg3) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  godot::String *arg3 = 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (godot::String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->rpad(arg2,(godot::String const &)*arg3);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_rpad__SWIG_1(void * jarg1, long long jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = ((godot::String const *)arg1)->rpad(arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_pad_decimals(void * jarg1, long long jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = ((godot::String const *)arg1)->pad_decimals(arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_pad_zeros(void * jarg1, long long jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  int64_t arg2 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = ((godot::String const *)arg1)->pad_zeros(arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_trim_prefix(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->trim_prefix((godot::String const &)*arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_trim_suffix(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::String *arg2 = 0 ;
  godot::String result;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::String const *)arg1)->trim_suffix((godot::String const &)*arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_to_ascii_buffer(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::PackedByteArray result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->to_ascii_buffer();
  jresult = new godot::PackedByteArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_to_utf8_buffer(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::PackedByteArray result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->to_utf8_buffer();
  jresult = new godot::PackedByteArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_to_utf16_buffer(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::PackedByteArray result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->to_utf16_buffer();
  jresult = new godot::PackedByteArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_to_utf32_buffer(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::PackedByteArray result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->to_utf32_buffer();
  jresult = new godot::PackedByteArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_hex_decode(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::PackedByteArray result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->hex_decode();
  jresult = new godot::PackedByteArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_to_wchar_buffer(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  godot::PackedByteArray result;
  
  arg1 = (godot::String *)jarg1; 
  result = ((godot::String const *)arg1)->to_wchar_buffer();
  jresult = new godot::PackedByteArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_num_scientific(double jarg1) {
  void * jresult ;
  double arg1 ;
  godot::String result;
  
  arg1 = (double)jarg1; 
  result = godot::String::num_scientific(arg1);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_num__SWIG_0(double jarg1, long long jarg2) {
  void * jresult ;
  double arg1 ;
  int64_t arg2 ;
  godot::String result;
  
  arg1 = (double)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = godot::String::num(arg1,arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_num__SWIG_1(double jarg1) {
  void * jresult ;
  double arg1 ;
  godot::String result;
  
  arg1 = (double)jarg1; 
  result = godot::String::num(arg1);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_num_int64__SWIG_0(long long jarg1, long long jarg2, unsigned int jarg3) {
  void * jresult ;
  int64_t arg1 ;
  int64_t arg2 ;
  bool arg3 ;
  godot::String result;
  
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = godot::String::num_int64(arg1,arg2,arg3);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_num_int64__SWIG_1(long long jarg1, long long jarg2) {
  void * jresult ;
  int64_t arg1 ;
  int64_t arg2 ;
  godot::String result;
  
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = godot::String::num_int64(arg1,arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_num_int64__SWIG_2(long long jarg1) {
  void * jresult ;
  int64_t arg1 ;
  godot::String result;
  
  arg1 = (int64_t)jarg1; 
  result = godot::String::num_int64(arg1);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_num_uint64__SWIG_0(long long jarg1, long long jarg2, unsigned int jarg3) {
  void * jresult ;
  int64_t arg1 ;
  int64_t arg2 ;
  bool arg3 ;
  godot::String result;
  
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = godot::String::num_uint64(arg1,arg2,arg3);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_num_uint64__SWIG_1(long long jarg1, long long jarg2) {
  void * jresult ;
  int64_t arg1 ;
  int64_t arg2 ;
  godot::String result;
  
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = godot::String::num_uint64(arg1,arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_num_uint64__SWIG_2(long long jarg1) {
  void * jresult ;
  int64_t arg1 ;
  godot::String result;
  
  arg1 = (int64_t)jarg1; 
  result = godot::String::num_uint64(arg1);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_chr(long long jarg1) {
  void * jresult ;
  int64_t arg1 ;
  godot::String result;
  
  arg1 = (int64_t)jarg1; 
  result = godot::String::chr(arg1);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_humanize_size(long long jarg1) {
  void * jresult ;
  int64_t arg1 ;
  godot::String result;
  
  arg1 = (int64_t)jarg1; 
  result = godot::String::humanize_size(arg1);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_utf8__SWIG_0(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  godot::String result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = godot::String::utf8((char const *)arg1,arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_utf8__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  godot::String result;
  
  arg1 = (char *)jarg1; 
  result = godot::String::utf8((char const *)arg1);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotString_parse_utf8__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  godot::String *arg1 = (godot::String *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->parse_utf8((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotString_parse_utf8__SWIG_1(void * jarg1, char * jarg2) {
  godot::String *arg1 = (godot::String *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->parse_utf8((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_utf16__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  char16_t *arg1 = (char16_t *) 0 ;
  int arg2 ;
  godot::String result;
  
  arg1 = (char16_t *)jarg1; 
  arg2 = (int)jarg2; 
  result = godot::String::utf16((char16_t const *)arg1,arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_utf16__SWIG_1(void * jarg1) {
  void * jresult ;
  char16_t *arg1 = (char16_t *) 0 ;
  godot::String result;
  
  arg1 = (char16_t *)jarg1; 
  result = godot::String::utf16((char16_t const *)arg1);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotString_parse_utf16__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  godot::String *arg1 = (godot::String *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int arg3 ;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->parse_utf16((char16_t const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotString_parse_utf16__SWIG_1(void * jarg1, void * jarg2) {
  godot::String *arg1 = (godot::String *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (godot::String *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->parse_utf16((char16_t const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_num_real__SWIG_0(double jarg1, unsigned int jarg2) {
  void * jresult ;
  double arg1 ;
  bool arg2 ;
  godot::String result;
  
  arg1 = (double)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = godot::String::num_real(arg1,arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_num_real__SWIG_1(double jarg1) {
  void * jresult ;
  double arg1 ;
  godot::String result;
  
  arg1 = (double)jarg1; 
  result = godot::String::num_real(arg1);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotString_operatornot(void * jarg1) {
  unsigned int jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  bool result;
  
  arg1 = (godot::String *)jarg1; 
  result = (bool)((godot::String const *)arg1)->operatornot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_ptr(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  char32_t *result = 0 ;
  
  arg1 = (godot::String *)jarg1; 
  result = (char32_t *)((godot::String const *)arg1)->ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotString_ptrw(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  char32_t *result = 0 ;
  
  arg1 = (godot::String *)jarg1; 
  result = (char32_t *)(arg1)->ptrw();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GodotString_AsString(void * jarg1) {
  char * jresult ;
  godot::String *arg1 = (godot::String *) 0 ;
  char *result = 0 ;
  
  arg1 = (godot::String *)jarg1; 
  result = (char *)godot_String_AsString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringName__SWIG_0() {
  void * jresult ;
  godot::StringName *result = 0 ;
  
  result = (godot::StringName *)new godot::StringName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringName__SWIG_1(void * jarg1) {
  void * jresult ;
  godot::StringName *arg1 = 0 ;
  godot::StringName *result = 0 ;
  
  arg1 = (godot::StringName *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = (godot::StringName *)new godot::StringName((godot::StringName const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringName__SWIG_2(void * jarg1) {
  void * jresult ;
  godot::String *arg1 = 0 ;
  godot::StringName *result = 0 ;
  
  arg1 = (godot::String *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (godot::StringName *)new godot::StringName((godot::String const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringName__SWIG_4(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  godot::StringName *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (godot::StringName *)new godot::StringName((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringName(void * jarg1) {
  godot::StringName *arg1 = (godot::StringName *) 0 ;
  
  arg1 = (godot::StringName *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GodotObject_NOTIFICATION_POSTINITIALIZE_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Object::NOTIFICATION_POSTINITIALIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GodotObject_NOTIFICATION_PREDELETE_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Object::NOTIFICATION_PREDELETE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_get_class(void * jarg1) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::String result;
  
  arg1 = (godot::Object *)jarg1; 
  result = ((godot::Object const *)arg1)->get_class();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotObject_is_class(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::String *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::Object const *)arg1)->is_class((godot::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotObject_set(void * jarg1, void * jarg2, void * jarg3) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Variant *arg3 = 0 ;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return ;
  } 
  arg3 = (godot::Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Variant const & is null", 0);
    return ;
  } 
  (arg1)->set((godot::StringName const &)*arg2,(godot::Variant const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_get(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Variant result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = ((godot::Object const *)arg1)->get((godot::StringName const &)*arg2);
  jresult = new godot::Variant(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotObject_set_indexed(void * jarg1, void * jarg2, void * jarg3) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::NodePath *arg2 = 0 ;
  godot::Variant *arg3 = 0 ;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::NodePath const & is null", 0);
    return ;
  } 
  arg3 = (godot::Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Variant const & is null", 0);
    return ;
  } 
  (arg1)->set_indexed((godot::NodePath const &)*arg2,(godot::Variant const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_get_indexed(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::NodePath *arg2 = 0 ;
  godot::Variant result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::NodePath const & is null", 0);
    return 0;
  } 
  result = ((godot::Object const *)arg1)->get_indexed((godot::NodePath const &)*arg2);
  jresult = new godot::Variant(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_get_property_list(void * jarg1) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  SwigValueWrapper< godot::TypedArray< godot::Dictionary > > result;
  
  arg1 = (godot::Object *)jarg1; 
  result = ((godot::Object const *)arg1)->get_property_list();
  jresult = new godot::TypedArray< godot::Dictionary >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_get_method_list(void * jarg1) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  SwigValueWrapper< godot::TypedArray< godot::Dictionary > > result;
  
  arg1 = (godot::Object *)jarg1; 
  result = ((godot::Object const *)arg1)->get_method_list();
  jresult = new godot::TypedArray< godot::Dictionary >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotObject_property_can_revert(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::Object const *)arg1)->property_can_revert((godot::StringName const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_property_get_revert(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Variant result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = ((godot::Object const *)arg1)->property_get_revert((godot::StringName const &)*arg2);
  jresult = new godot::Variant(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotObject_notification__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  int32_t arg2 ;
  bool arg3 ;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->notification(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotObject_notification__SWIG_1(void * jarg1, int jarg2) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  int32_t arg2 ;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->notification(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_to_string(void * jarg1) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::String result;
  
  arg1 = (godot::Object *)jarg1; 
  result = (arg1)->to_string();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_GodotObject_get_instance_id(void * jarg1) {
  unsigned long long jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  uint64_t result;
  
  arg1 = (godot::Object *)jarg1; 
  result = (uint64_t)((godot::Object const *)arg1)->get_instance_id();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotObject_set_script(void * jarg1, void * jarg2) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::Variant *arg2 = 0 ;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Variant const & is null", 0);
    return ;
  } 
  (arg1)->set_script((godot::Variant const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_get_script(void * jarg1) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::Variant result;
  
  arg1 = (godot::Object *)jarg1; 
  result = ((godot::Object const *)arg1)->get_script();
  jresult = new godot::Variant(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotObject_set_meta(void * jarg1, void * jarg2, void * jarg3) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Variant *arg3 = 0 ;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return ;
  } 
  arg3 = (godot::Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Variant const & is null", 0);
    return ;
  } 
  (arg1)->set_meta((godot::StringName const &)*arg2,(godot::Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotObject_remove_meta(void * jarg1, void * jarg2) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return ;
  } 
  (arg1)->remove_meta((godot::StringName const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_get_meta__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Variant *arg3 = 0 ;
  godot::Variant result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  arg3 = (godot::Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Variant const & is null", 0);
    return 0;
  } 
  result = ((godot::Object const *)arg1)->get_meta((godot::StringName const &)*arg2,(godot::Variant const &)*arg3);
  jresult = new godot::Variant(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_get_meta__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Variant result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = ((godot::Object const *)arg1)->get_meta((godot::StringName const &)*arg2);
  jresult = new godot::Variant(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotObject_has_meta(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::Object const *)arg1)->has_meta((godot::StringName const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_get_meta_list(void * jarg1) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  SwigValueWrapper< godot::TypedArray< godot::StringName > > result;
  
  arg1 = (godot::Object *)jarg1; 
  result = ((godot::Object const *)arg1)->get_meta_list();
  jresult = new godot::TypedArray< godot::StringName >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotObject_add_user_signal__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::String *arg2 = 0 ;
  godot::Array *arg3 = 0 ;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return ;
  } 
  arg3 = (godot::Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Array const & is null", 0);
    return ;
  } 
  (arg1)->add_user_signal((godot::String const &)*arg2,(godot::Array const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotObject_add_user_signal__SWIG_1(void * jarg1, void * jarg2) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::String *arg2 = 0 ;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return ;
  } 
  (arg1)->add_user_signal((godot::String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotObject_has_user_signal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::Object const *)arg1)->has_user_signal((godot::StringName const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotObject_set_deferred(void * jarg1, void * jarg2, void * jarg3) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Variant *arg3 = 0 ;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return ;
  } 
  arg3 = (godot::Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Variant const & is null", 0);
    return ;
  } 
  (arg1)->set_deferred((godot::StringName const &)*arg2,(godot::Variant const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_callv(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Array *arg3 = 0 ;
  godot::Variant result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  arg3 = (godot::Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Array const & is null", 0);
    return 0;
  } 
  result = (arg1)->callv((godot::StringName const &)*arg2,(godot::Array const &)*arg3);
  jresult = new godot::Variant(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotObject_has_method(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::Object const *)arg1)->has_method((godot::StringName const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotObject_has_signal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::Object const *)arg1)->has_signal((godot::StringName const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_get_signal_list(void * jarg1) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  SwigValueWrapper< godot::TypedArray< godot::Dictionary > > result;
  
  arg1 = (godot::Object *)jarg1; 
  result = ((godot::Object const *)arg1)->get_signal_list();
  jresult = new godot::TypedArray< godot::Dictionary >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_get_signal_connection_list(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  SwigValueWrapper< godot::TypedArray< godot::Dictionary > > result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = ((godot::Object const *)arg1)->get_signal_connection_list((godot::StringName const &)*arg2);
  jresult = new godot::TypedArray< godot::Dictionary >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_get_incoming_connections(void * jarg1) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  SwigValueWrapper< godot::TypedArray< godot::Dictionary > > result;
  
  arg1 = (godot::Object *)jarg1; 
  result = ((godot::Object const *)arg1)->get_incoming_connections();
  jresult = new godot::TypedArray< godot::Dictionary >(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GodotObject_connect__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Callable *arg3 = 0 ;
  uint32_t arg4 ;
  godot::Error result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  arg3 = (godot::Callable *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Callable const & is null", 0);
    return 0;
  } 
  arg4 = (uint32_t)jarg4; 
  result = (godot::Error)(arg1)->connect((godot::StringName const &)*arg2,(godot::Callable const &)*arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GodotObject_connect__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Callable *arg3 = 0 ;
  godot::Error result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  arg3 = (godot::Callable *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Callable const & is null", 0);
    return 0;
  } 
  result = (godot::Error)(arg1)->connect((godot::StringName const &)*arg2,(godot::Callable const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotObject_disconnect(void * jarg1, void * jarg2, void * jarg3) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Callable *arg3 = 0 ;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return ;
  } 
  arg3 = (godot::Callable *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Callable const & is null", 0);
    return ;
  } 
  (arg1)->disconnect((godot::StringName const &)*arg2,(godot::Callable const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotObject_is_connected(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Callable *arg3 = 0 ;
  bool result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  arg3 = (godot::Callable *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Callable const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::Object const *)arg1)->is_connected((godot::StringName const &)*arg2,(godot::Callable const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotObject_set_block_signals(void * jarg1, unsigned int jarg2) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  bool arg2 ;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_block_signals(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotObject_is_blocking_signals(void * jarg1) {
  unsigned int jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  bool result;
  
  arg1 = (godot::Object *)jarg1; 
  result = (bool)((godot::Object const *)arg1)->is_blocking_signals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotObject_notify_property_list_changed(void * jarg1) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  
  arg1 = (godot::Object *)jarg1; 
  (arg1)->notify_property_list_changed();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotObject_set_message_translation(void * jarg1, unsigned int jarg2) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  bool arg2 ;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_message_translation(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotObject_can_translate_messages(void * jarg1) {
  unsigned int jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  bool result;
  
  arg1 = (godot::Object *)jarg1; 
  result = (bool)((godot::Object const *)arg1)->can_translate_messages();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_tr__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::StringName *arg3 = 0 ;
  godot::String result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  arg3 = (godot::StringName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = ((godot::Object const *)arg1)->tr((godot::StringName const &)*arg2,(godot::StringName const &)*arg3);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_tr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::String result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = ((godot::Object const *)arg1)->tr((godot::StringName const &)*arg2);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_tr_n__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::StringName *arg3 = 0 ;
  int32_t arg4 ;
  godot::StringName *arg5 = 0 ;
  godot::String result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  arg3 = (godot::StringName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  arg4 = (int32_t)jarg4; 
  arg5 = (godot::StringName *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = ((godot::Object const *)arg1)->tr_n((godot::StringName const &)*arg2,(godot::StringName const &)*arg3,arg4,(godot::StringName const &)*arg5);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GodotObject_tr_n__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::StringName *arg3 = 0 ;
  int32_t arg4 ;
  godot::String result;
  
  arg1 = (godot::Object *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  arg3 = (godot::StringName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  arg4 = (int32_t)jarg4; 
  result = ((godot::Object const *)arg1)->tr_n((godot::StringName const &)*arg2,(godot::StringName const &)*arg3,arg4);
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GodotObject_is_queued_for_deletion(void * jarg1) {
  unsigned int jresult ;
  godot::Object *arg1 = (godot::Object *) 0 ;
  bool result;
  
  arg1 = (godot::Object *)jarg1; 
  result = (bool)((godot::Object const *)arg1)->is_queued_for_deletion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GodotObject_cancel_free(void * jarg1) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  
  arg1 = (godot::Object *)jarg1; 
  (arg1)->cancel_free();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GodotObject() {
  void * jresult ;
  godot::Object *result = 0 ;
  
  result = (godot::Object *)new godot::Object();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GodotObject(void * jarg1) {
  godot::Object *arg1 = (godot::Object *) 0 ;
  
  arg1 = (godot::Object *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_ENTER_TREE_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_ENTER_TREE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_EXIT_TREE_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_EXIT_TREE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_MOVED_IN_PARENT_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_MOVED_IN_PARENT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_READY_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_READY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_PAUSED_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_PAUSED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_UNPAUSED_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_UNPAUSED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_PHYSICS_PROCESS_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_PHYSICS_PROCESS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_PROCESS_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_PROCESS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_PARENTED_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_PARENTED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_UNPARENTED_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_UNPARENTED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_SCENE_INSTANTIATED_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_SCENE_INSTANTIATED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_DRAG_BEGIN_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_DRAG_BEGIN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_DRAG_END_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_DRAG_END;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_PATH_RENAMED_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_PATH_RENAMED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_CHILD_ORDER_CHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_CHILD_ORDER_CHANGED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_INTERNAL_PROCESS_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_INTERNAL_PROCESS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_INTERNAL_PHYSICS_PROCESS_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_INTERNAL_PHYSICS_PROCESS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_POST_ENTER_TREE_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_POST_ENTER_TREE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_DISABLED_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_DISABLED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_ENABLED_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_ENABLED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_NODE_RECACHE_REQUESTED_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_NODE_RECACHE_REQUESTED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_EDITOR_PRE_SAVE_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_EDITOR_PRE_SAVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_EDITOR_POST_SAVE_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_EDITOR_POST_SAVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_WM_MOUSE_ENTER_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_WM_MOUSE_ENTER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_WM_MOUSE_EXIT_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_WM_MOUSE_EXIT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_WM_WINDOW_FOCUS_IN_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_WM_WINDOW_FOCUS_IN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_WM_WINDOW_FOCUS_OUT_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_WM_WINDOW_FOCUS_OUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_WM_CLOSE_REQUEST_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_WM_CLOSE_REQUEST;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_WM_GO_BACK_REQUEST_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_WM_GO_BACK_REQUEST;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_WM_SIZE_CHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_WM_SIZE_CHANGED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_WM_DPI_CHANGE_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_WM_DPI_CHANGE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_VP_MOUSE_ENTER_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_VP_MOUSE_ENTER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_VP_MOUSE_EXIT_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_VP_MOUSE_EXIT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_OS_MEMORY_WARNING_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_OS_MEMORY_WARNING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_TRANSLATION_CHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_TRANSLATION_CHANGED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_WM_ABOUT_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_WM_ABOUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_CRASH_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_CRASH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_OS_IME_UPDATE_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_OS_IME_UPDATE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_APPLICATION_RESUMED_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_APPLICATION_RESUMED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_APPLICATION_PAUSED_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_APPLICATION_PAUSED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_APPLICATION_FOCUS_IN_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_APPLICATION_FOCUS_IN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_APPLICATION_FOCUS_OUT_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_APPLICATION_FOCUS_OUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_NOTIFICATION_TEXT_SERVER_CHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)godot::Node::NOTIFICATION_TEXT_SERVER_CHANGED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_print_orphan_nodes() {
  godot::Node::print_orphan_nodes();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_add_sibling__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  bool arg3 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->add_sibling(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_add_sibling__SWIG_1(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  (arg1)->add_sibling(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_name(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::String *arg2 = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return ;
  } 
  (arg1)->set_name((godot::String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_name(void * jarg1) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::StringName result;
  
  arg1 = (godot::Node *)jarg1; 
  result = ((godot::Node const *)arg1)->get_name();
  jresult = new godot::StringName(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_add_child__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  bool arg3 ;
  godot::Node::InternalMode arg4 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (godot::Node::InternalMode)jarg4; 
  (arg1)->add_child(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_add_child__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  bool arg3 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->add_child(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_add_child__SWIG_2(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  (arg1)->add_child(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_remove_child(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  (arg1)->remove_child(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_reparent__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  bool arg3 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->reparent(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_reparent__SWIG_1(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  (arg1)->reparent(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_child_count__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool arg2 ;
  int32_t result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int32_t)((godot::Node const *)arg1)->get_child_count(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_child_count__SWIG_1(void * jarg1) {
  int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (int32_t)((godot::Node const *)arg1)->get_child_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_children__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool arg2 ;
  SwigValueWrapper< godot::TypedArray< godot::Node > > result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((godot::Node const *)arg1)->get_children(arg2);
  jresult = new godot::TypedArray< godot::Node >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_children__SWIG_1(void * jarg1) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  SwigValueWrapper< godot::TypedArray< godot::Node > > result;
  
  arg1 = (godot::Node *)jarg1; 
  result = ((godot::Node const *)arg1)->get_children();
  jresult = new godot::TypedArray< godot::Node >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_child__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t arg2 ;
  bool arg3 ;
  godot::Node *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (godot::Node *)((godot::Node const *)arg1)->get_child(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_child__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t arg2 ;
  godot::Node *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (godot::Node *)((godot::Node const *)arg1)->get_child(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_has_node(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::NodePath *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::NodePath const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::Node const *)arg1)->has_node((godot::NodePath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_node_internal(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::NodePath *arg2 = 0 ;
  godot::Node *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::NodePath const & is null", 0);
    return 0;
  } 
  result = (godot::Node *)((godot::Node const *)arg1)->get_node_internal((godot::NodePath const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_node_or_null(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::NodePath *arg2 = 0 ;
  godot::Node *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::NodePath const & is null", 0);
    return 0;
  } 
  result = (godot::Node *)((godot::Node const *)arg1)->get_node_or_null((godot::NodePath const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_parent(void * jarg1) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  result = (godot::Node *)((godot::Node const *)arg1)->get_parent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_find_child__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::String *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  godot::Node *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (godot::Node *)((godot::Node const *)arg1)->find_child((godot::String const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_find_child__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::String *arg2 = 0 ;
  bool arg3 ;
  godot::Node *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (godot::Node *)((godot::Node const *)arg1)->find_child((godot::String const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_find_child__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::String *arg2 = 0 ;
  godot::Node *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (godot::Node *)((godot::Node const *)arg1)->find_child((godot::String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_find_children__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::String *arg2 = 0 ;
  godot::String *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  SwigValueWrapper< godot::TypedArray< godot::Node > > result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = (godot::String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = ((godot::Node const *)arg1)->find_children((godot::String const &)*arg2,(godot::String const &)*arg3,arg4,arg5);
  jresult = new godot::TypedArray< godot::Node >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_find_children__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::String *arg2 = 0 ;
  godot::String *arg3 = 0 ;
  bool arg4 ;
  SwigValueWrapper< godot::TypedArray< godot::Node > > result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = (godot::String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((godot::Node const *)arg1)->find_children((godot::String const &)*arg2,(godot::String const &)*arg3,arg4);
  jresult = new godot::TypedArray< godot::Node >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_find_children__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::String *arg2 = 0 ;
  godot::String *arg3 = 0 ;
  SwigValueWrapper< godot::TypedArray< godot::Node > > result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg3 = (godot::String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::Node const *)arg1)->find_children((godot::String const &)*arg2,(godot::String const &)*arg3);
  jresult = new godot::TypedArray< godot::Node >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_find_children__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::String *arg2 = 0 ;
  SwigValueWrapper< godot::TypedArray< godot::Node > > result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = ((godot::Node const *)arg1)->find_children((godot::String const &)*arg2);
  jresult = new godot::TypedArray< godot::Node >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_find_parent(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::String *arg2 = 0 ;
  godot::Node *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (godot::Node *)((godot::Node const *)arg1)->find_parent((godot::String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_has_node_and_resource(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::NodePath *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::NodePath const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::Node const *)arg1)->has_node_and_resource((godot::NodePath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_node_and_resource(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::NodePath *arg2 = 0 ;
  SwigValueWrapper< godot::Array > result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::NodePath const & is null", 0);
    return 0;
  } 
  result = (arg1)->get_node_and_resource((godot::NodePath const &)*arg2);
  jresult = new godot::Array(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_inside_tree(void * jarg1) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (bool)((godot::Node const *)arg1)->is_inside_tree();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_ancestor_of(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  result = (bool)((godot::Node const *)arg1)->is_ancestor_of(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_greater_than(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  result = (bool)((godot::Node const *)arg1)->is_greater_than(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_path(void * jarg1) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::NodePath result;
  
  arg1 = (godot::Node *)jarg1; 
  result = ((godot::Node const *)arg1)->get_path();
  jresult = new godot::NodePath(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_path_to__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  bool arg3 ;
  godot::NodePath result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = ((godot::Node const *)arg1)->get_path_to(arg2,arg3);
  jresult = new godot::NodePath(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_path_to__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  godot::NodePath result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  result = ((godot::Node const *)arg1)->get_path_to(arg2);
  jresult = new godot::NodePath(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_add_to_group__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::StringName *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->add_to_group((godot::StringName const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_add_to_group__SWIG_1(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::StringName *arg2 = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return ;
  } 
  (arg1)->add_to_group((godot::StringName const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_remove_from_group(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::StringName *arg2 = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return ;
  } 
  (arg1)->remove_from_group((godot::StringName const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_in_group(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::StringName *arg2 = 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = (bool)((godot::Node const *)arg1)->is_in_group((godot::StringName const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_move_child(void * jarg1, void * jarg2, int jarg3) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  int32_t arg3 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->move_child(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_groups(void * jarg1) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  SwigValueWrapper< godot::TypedArray< godot::StringName > > result;
  
  arg1 = (godot::Node *)jarg1; 
  result = ((godot::Node const *)arg1)->get_groups();
  jresult = new godot::TypedArray< godot::StringName >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_owner(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  (arg1)->set_owner(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_owner(void * jarg1) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  result = (godot::Node *)((godot::Node const *)arg1)->get_owner();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_index__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool arg2 ;
  int32_t result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int32_t)((godot::Node const *)arg1)->get_index(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_index__SWIG_1(void * jarg1) {
  int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (int32_t)((godot::Node const *)arg1)->get_index();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_print_tree(void * jarg1) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  (arg1)->print_tree();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_print_tree_pretty(void * jarg1) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  (arg1)->print_tree_pretty();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_scene_file_path(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::String *arg2 = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return ;
  } 
  (arg1)->set_scene_file_path((godot::String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_scene_file_path(void * jarg1) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::String result;
  
  arg1 = (godot::Node *)jarg1; 
  result = ((godot::Node const *)arg1)->get_scene_file_path();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_propagate_notification(void * jarg1, int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->propagate_notification(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_propagate_call__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Array *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return ;
  } 
  arg3 = (godot::Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Array const & is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->propagate_call((godot::StringName const &)*arg2,(godot::Array const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_propagate_call__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Array *arg3 = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return ;
  } 
  arg3 = (godot::Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Array const & is null", 0);
    return ;
  } 
  (arg1)->propagate_call((godot::StringName const &)*arg2,(godot::Array const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_propagate_call__SWIG_2(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::StringName *arg2 = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return ;
  } 
  (arg1)->propagate_call((godot::StringName const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_physics_process(void * jarg1, unsigned int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_physics_process(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_Node_get_physics_process_delta_time(void * jarg1) {
  double jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  double result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (double)((godot::Node const *)arg1)->get_physics_process_delta_time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_physics_processing(void * jarg1) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (bool)((godot::Node const *)arg1)->is_physics_processing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Node_get_process_delta_time(void * jarg1) {
  double jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  double result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (double)((godot::Node const *)arg1)->get_process_delta_time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process(void * jarg1, unsigned int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_process(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_priority(void * jarg1, int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->set_process_priority(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_process_priority(void * jarg1) {
  int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (int32_t)((godot::Node const *)arg1)->get_process_priority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_physics_process_priority(void * jarg1, int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->set_physics_process_priority(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_physics_process_priority(void * jarg1) {
  int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (int32_t)((godot::Node const *)arg1)->get_physics_process_priority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_processing(void * jarg1) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (bool)((godot::Node const *)arg1)->is_processing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_input(void * jarg1, unsigned int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_process_input(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_processing_input(void * jarg1) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (bool)((godot::Node const *)arg1)->is_processing_input();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_shortcut_input(void * jarg1, unsigned int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_process_shortcut_input(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_processing_shortcut_input(void * jarg1) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (bool)((godot::Node const *)arg1)->is_processing_shortcut_input();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_unhandled_input(void * jarg1, unsigned int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_process_unhandled_input(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_processing_unhandled_input(void * jarg1) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (bool)((godot::Node const *)arg1)->is_processing_unhandled_input();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_unhandled_key_input(void * jarg1, unsigned int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_process_unhandled_key_input(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_processing_unhandled_key_input(void * jarg1) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (bool)((godot::Node const *)arg1)->is_processing_unhandled_key_input();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_mode(void * jarg1, int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node::ProcessMode arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node::ProcessMode)jarg2; 
  (arg1)->set_process_mode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_process_mode(void * jarg1) {
  int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node::ProcessMode result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (godot::Node::ProcessMode)((godot::Node const *)arg1)->get_process_mode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_can_process(void * jarg1) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (bool)((godot::Node const *)arg1)->can_process();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_thread_group(void * jarg1, int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node::ProcessThreadGroup arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node::ProcessThreadGroup)jarg2; 
  (arg1)->set_process_thread_group(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_process_thread_group(void * jarg1) {
  int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node::ProcessThreadGroup result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (godot::Node::ProcessThreadGroup)((godot::Node const *)arg1)->get_process_thread_group();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_thread_messages(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  SwigValueWrapper< godot::BitField< enum godot::Node::ProcessThreadMessages > > arg2 ;
  godot::BitField< godot::Node::ProcessThreadMessages > *argp2 ;
  
  arg1 = (godot::Node *)jarg1; 
  argp2 = (godot::BitField< godot::Node::ProcessThreadMessages > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null godot::BitField< godot::Node::ProcessThreadMessages >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_process_thread_messages(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_process_thread_messages(void * jarg1) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  SwigValueWrapper< godot::BitField< enum godot::Node::ProcessThreadMessages > > result;
  
  arg1 = (godot::Node *)jarg1; 
  result = ((godot::Node const *)arg1)->get_process_thread_messages();
  jresult = new godot::BitField< godot::Node::ProcessThreadMessages >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_thread_group_order(void * jarg1, int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->set_process_thread_group_order(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_process_thread_group_order(void * jarg1) {
  int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (int32_t)((godot::Node const *)arg1)->get_process_thread_group_order();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_display_folded(void * jarg1, unsigned int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_display_folded(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_displayed_folded(void * jarg1) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (bool)((godot::Node const *)arg1)->is_displayed_folded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_internal(void * jarg1, unsigned int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_process_internal(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_processing_internal(void * jarg1) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (bool)((godot::Node const *)arg1)->is_processing_internal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_physics_process_internal(void * jarg1, unsigned int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_physics_process_internal(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_physics_processing_internal(void * jarg1) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (bool)((godot::Node const *)arg1)->is_physics_processing_internal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_window(void * jarg1) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Window *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  result = (godot::Window *)((godot::Node const *)arg1)->get_window();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_last_exclusive_window(void * jarg1) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Window *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  result = (godot::Window *)((godot::Node const *)arg1)->get_last_exclusive_window();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_tree(void * jarg1) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::SceneTree *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  result = (godot::SceneTree *)((godot::Node const *)arg1)->get_tree();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_duplicate__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t arg2 ;
  godot::Node *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (godot::Node *)((godot::Node const *)arg1)->duplicate(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_duplicate__SWIG_1(void * jarg1) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  result = (godot::Node *)((godot::Node const *)arg1)->duplicate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_replace_by__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  bool arg3 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->replace_by(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_replace_by__SWIG_1(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  (arg1)->replace_by(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_scene_instance_load_placeholder(void * jarg1, unsigned int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_scene_instance_load_placeholder(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_get_scene_instance_load_placeholder(void * jarg1) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (bool)((godot::Node const *)arg1)->get_scene_instance_load_placeholder();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_editable_instance(void * jarg1, void * jarg2, unsigned int jarg3) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  bool arg3 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->set_editable_instance(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_editable_instance(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Node *arg2 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Node *)jarg2; 
  result = (bool)((godot::Node const *)arg1)->is_editable_instance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_viewport(void * jarg1) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Viewport *result = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  result = (godot::Viewport *)((godot::Node const *)arg1)->get_viewport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_queue_free(void * jarg1) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  (arg1)->queue_free();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_request_ready(void * jarg1) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  (arg1)->request_ready();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_node_ready(void * jarg1) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (bool)((godot::Node const *)arg1)->is_node_ready();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_multiplayer_authority__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t arg2 ;
  bool arg3 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->set_multiplayer_authority(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_multiplayer_authority__SWIG_1(void * jarg1, int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->set_multiplayer_authority(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_multiplayer_authority(void * jarg1) {
  int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (int32_t)((godot::Node const *)arg1)->get_multiplayer_authority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_multiplayer_authority(void * jarg1) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (bool)((godot::Node const *)arg1)->is_multiplayer_authority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_rpc_config(void * jarg1, void * jarg2, void * jarg3) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Variant *arg3 = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return ;
  } 
  arg3 = (godot::Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Variant const & is null", 0);
    return ;
  } 
  (arg1)->rpc_config((godot::StringName const &)*arg2,(godot::Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_editor_description(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::String *arg2 = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return ;
  } 
  (arg1)->set_editor_description((godot::String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_editor_description(void * jarg1) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::String result;
  
  arg1 = (godot::Node *)jarg1; 
  result = ((godot::Node const *)arg1)->get_editor_description();
  jresult = new godot::String(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_unique_name_in_owner(void * jarg1, unsigned int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_unique_name_in_owner(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_unique_name_in_owner(void * jarg1) {
  unsigned int jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  bool result;
  
  arg1 = (godot::Node *)jarg1; 
  result = (bool)((godot::Node const *)arg1)->is_unique_name_in_owner();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_update_configuration_warnings(void * jarg1) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  (arg1)->update_configuration_warnings();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_deferred_thread_group(void * jarg1, void * jarg2, void * jarg3) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Variant *arg3 = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return ;
  } 
  arg3 = (godot::Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Variant const & is null", 0);
    return ;
  } 
  (arg1)->set_deferred_thread_group((godot::StringName const &)*arg2,(godot::Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_notify_deferred_thread_group(void * jarg1, int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->notify_deferred_thread_group(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_thread_safe(void * jarg1, void * jarg2, void * jarg3) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::StringName *arg2 = 0 ;
  godot::Variant *arg3 = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return ;
  } 
  arg3 = (godot::Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Variant const & is null", 0);
    return ;
  } 
  (arg1)->set_thread_safe((godot::StringName const &)*arg2,(godot::Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_notify_thread_safe(void * jarg1, int jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  int32_t arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->notify_thread_safe(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__process(void * jarg1, double jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  double arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->_process(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__physics_process(void * jarg1, double jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  double arg2 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->_physics_process(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__enter_tree(void * jarg1) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  (arg1)->_enter_tree();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__exit_tree(void * jarg1) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  (arg1)->_exit_tree();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__ready(void * jarg1) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  (arg1)->_ready();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node__get_configuration_warnings(void * jarg1) {
  void * jresult ;
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::PackedStringArray result;
  
  arg1 = (godot::Node *)jarg1; 
  result = ((godot::Node const *)arg1)->_get_configuration_warnings();
  jresult = new godot::PackedStringArray(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__input(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Ref< godot::InputEvent > *arg2 = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Ref< godot::InputEvent > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Ref< godot::InputEvent > const & is null", 0);
    return ;
  } 
  (arg1)->_input((godot::Ref< godot::InputEvent > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__shortcut_input(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Ref< godot::InputEvent > *arg2 = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Ref< godot::InputEvent > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Ref< godot::InputEvent > const & is null", 0);
    return ;
  } 
  (arg1)->_shortcut_input((godot::Ref< godot::InputEvent > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__unhandled_input(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Ref< godot::InputEvent > *arg2 = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Ref< godot::InputEvent > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Ref< godot::InputEvent > const & is null", 0);
    return ;
  } 
  (arg1)->_unhandled_input((godot::Ref< godot::InputEvent > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__unhandled_key_input(void * jarg1, void * jarg2) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  godot::Ref< godot::InputEvent > *arg2 = 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  arg2 = (godot::Ref< godot::InputEvent > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::Ref< godot::InputEvent > const & is null", 0);
    return ;
  } 
  (arg1)->_unhandled_key_input((godot::Ref< godot::InputEvent > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Node() {
  void * jresult ;
  godot::Node *result = 0 ;
  
  result = (godot::Node *)new godot::Node();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Node(void * jarg1) {
  godot::Node *arg1 = (godot::Node *) 0 ;
  
  arg1 = (godot::Node *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Variant() {
  void * jresult ;
  godot::Variant *result = 0 ;
  
  result = (godot::Variant *)new godot::Variant();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Variant(void * jarg1) {
  godot::Variant *arg1 = (godot::Variant *) 0 ;
  
  arg1 = (godot::Variant *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfo_type_set(void * jarg1, int jarg2) {
  godot::PropertyInfo *arg1 = (godot::PropertyInfo *) 0 ;
  godot::Variant::Type arg2 ;
  
  arg1 = (godot::PropertyInfo *)jarg1; 
  arg2 = (godot::Variant::Type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PropertyInfo_type_get(void * jarg1) {
  int jresult ;
  godot::PropertyInfo *arg1 = (godot::PropertyInfo *) 0 ;
  godot::Variant::Type result;
  
  arg1 = (godot::PropertyInfo *)jarg1; 
  result = (godot::Variant::Type) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfo_name_set(void * jarg1, void * jarg2) {
  godot::PropertyInfo *arg1 = (godot::PropertyInfo *) 0 ;
  godot::StringName *arg2 = (godot::StringName *) 0 ;
  
  arg1 = (godot::PropertyInfo *)jarg1; 
  arg2 = (godot::StringName *)jarg2; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PropertyInfo_name_get(void * jarg1) {
  void * jresult ;
  godot::PropertyInfo *arg1 = (godot::PropertyInfo *) 0 ;
  godot::StringName *result = 0 ;
  
  arg1 = (godot::PropertyInfo *)jarg1; 
  result = (godot::StringName *)& ((arg1)->name);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfo_class_name_set(void * jarg1, void * jarg2) {
  godot::PropertyInfo *arg1 = (godot::PropertyInfo *) 0 ;
  godot::StringName *arg2 = (godot::StringName *) 0 ;
  
  arg1 = (godot::PropertyInfo *)jarg1; 
  arg2 = (godot::StringName *)jarg2; 
  if (arg1) (arg1)->class_name = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PropertyInfo_class_name_get(void * jarg1) {
  void * jresult ;
  godot::PropertyInfo *arg1 = (godot::PropertyInfo *) 0 ;
  godot::StringName *result = 0 ;
  
  arg1 = (godot::PropertyInfo *)jarg1; 
  result = (godot::StringName *)& ((arg1)->class_name);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfo_hint_set(void * jarg1, unsigned int jarg2) {
  godot::PropertyInfo *arg1 = (godot::PropertyInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (godot::PropertyInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->hint = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PropertyInfo_hint_get(void * jarg1) {
  unsigned int jresult ;
  godot::PropertyInfo *arg1 = (godot::PropertyInfo *) 0 ;
  uint32_t result;
  
  arg1 = (godot::PropertyInfo *)jarg1; 
  result = (uint32_t) ((arg1)->hint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfo_hint_string_set(void * jarg1, void * jarg2) {
  godot::PropertyInfo *arg1 = (godot::PropertyInfo *) 0 ;
  godot::String *arg2 = (godot::String *) 0 ;
  
  arg1 = (godot::PropertyInfo *)jarg1; 
  arg2 = (godot::String *)jarg2; 
  if (arg1) (arg1)->hint_string = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PropertyInfo_hint_string_get(void * jarg1) {
  void * jresult ;
  godot::PropertyInfo *arg1 = (godot::PropertyInfo *) 0 ;
  godot::String *result = 0 ;
  
  arg1 = (godot::PropertyInfo *)jarg1; 
  result = (godot::String *)& ((arg1)->hint_string);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyInfo_usage_set(void * jarg1, unsigned int jarg2) {
  godot::PropertyInfo *arg1 = (godot::PropertyInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (godot::PropertyInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->usage = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PropertyInfo_usage_get(void * jarg1) {
  unsigned int jresult ;
  godot::PropertyInfo *arg1 = (godot::PropertyInfo *) 0 ;
  uint32_t result;
  
  arg1 = (godot::PropertyInfo *)jarg1; 
  result = (uint32_t) ((arg1)->usage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PropertyInfo__SWIG_0() {
  void * jresult ;
  godot::PropertyInfo *result = 0 ;
  
  result = (godot::PropertyInfo *)new godot::PropertyInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PropertyInfo__SWIG_1(int jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5, void * jarg6) {
  void * jresult ;
  godot::Variant::Type arg1 ;
  godot::StringName *arg2 = 0 ;
  godot::PropertyHint arg3 ;
  godot::String *arg4 = 0 ;
  uint32_t arg5 ;
  godot::StringName *arg6 = 0 ;
  godot::PropertyInfo *result = 0 ;
  
  arg1 = (godot::Variant::Type)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  arg3 = (godot::PropertyHint)jarg3; 
  arg4 = (godot::String *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg5 = (uint32_t)jarg5; 
  arg6 = (godot::StringName *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = (godot::PropertyInfo *)new godot::PropertyInfo(arg1,(godot::StringName const &)*arg2,arg3,(godot::String const &)*arg4,arg5,(godot::StringName const &)*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PropertyInfo__SWIG_2(int jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  godot::Variant::Type arg1 ;
  godot::StringName *arg2 = 0 ;
  godot::PropertyHint arg3 ;
  godot::String *arg4 = 0 ;
  uint32_t arg5 ;
  godot::PropertyInfo *result = 0 ;
  
  arg1 = (godot::Variant::Type)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  arg3 = (godot::PropertyHint)jarg3; 
  arg4 = (godot::String *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  arg5 = (uint32_t)jarg5; 
  result = (godot::PropertyInfo *)new godot::PropertyInfo(arg1,(godot::StringName const &)*arg2,arg3,(godot::String const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PropertyInfo__SWIG_3(int jarg1, void * jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  godot::Variant::Type arg1 ;
  godot::StringName *arg2 = 0 ;
  godot::PropertyHint arg3 ;
  godot::String *arg4 = 0 ;
  godot::PropertyInfo *result = 0 ;
  
  arg1 = (godot::Variant::Type)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  arg3 = (godot::PropertyHint)jarg3; 
  arg4 = (godot::String *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::String const & is null", 0);
    return 0;
  } 
  result = (godot::PropertyInfo *)new godot::PropertyInfo(arg1,(godot::StringName const &)*arg2,arg3,(godot::String const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PropertyInfo__SWIG_4(int jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  godot::Variant::Type arg1 ;
  godot::StringName *arg2 = 0 ;
  godot::PropertyHint arg3 ;
  godot::PropertyInfo *result = 0 ;
  
  arg1 = (godot::Variant::Type)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  arg3 = (godot::PropertyHint)jarg3; 
  result = (godot::PropertyInfo *)new godot::PropertyInfo(arg1,(godot::StringName const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PropertyInfo__SWIG_5(int jarg1, void * jarg2) {
  void * jresult ;
  godot::Variant::Type arg1 ;
  godot::StringName *arg2 = 0 ;
  godot::PropertyInfo *result = 0 ;
  
  arg1 = (godot::Variant::Type)jarg1; 
  arg2 = (godot::StringName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "godot::StringName const & is null", 0);
    return 0;
  } 
  result = (godot::PropertyInfo *)new godot::PropertyInfo(arg1,(godot::StringName const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PropertyInfo(void * jarg1) {
  godot::PropertyInfo *arg1 = (godot::PropertyInfo *) 0 ;
  
  arg1 = (godot::PropertyInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT godot::Object * SWIGSTDCALL CSharp_Node_SWIGUpcast(godot::Node *jarg1) {
    return (godot::Object *)jarg1;
}

#ifdef __cplusplus
}
#endif

